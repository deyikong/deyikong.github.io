<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deyi Kong</title>
  
  <subtitle>My personal website</subtitle>
  <link href="https://deyikong.github.io/atom.xml" rel="self"/>
  
  <link href="https://deyikong.github.io/"/>
  <updated>2023-02-14T07:37:15.109Z</updated>
  <id>https://deyikong.github.io/</id>
  
  <author>
    <name>Deyi Kong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Island Matrix</title>
    <link href="https://deyikong.github.io/2022/05/06/Island-Matrix/"/>
    <id>https://deyikong.github.io/2022/05/06/Island-Matrix/</id>
    <published>2022-05-06T06:39:57.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="union-find"><a class="markdownIt-Anchor" href="#union-find"></a> Union Find</h2><h2 id="largest-component-size-by-common-factor"><a class="markdownIt-Anchor" href="#largest-component-size-by-common-factor"></a> Largest Component Size by Common Factor</h2><p><a href="https://leetcode.com/problems/largest-component-size-by-common-factor/">https://leetcode.com/problems/largest-component-size-by-common-factor/</a></p><h2 id="max-area-of-island"><a class="markdownIt-Anchor" href="#max-area-of-island"></a> Max Area of Island</h2><p><a href="https://leetcode.com/problems/max-area-of-island/">https://leetcode.com/problems/max-area-of-island/</a></p><h3 id="solutions"><a class="markdownIt-Anchor" href="#solutions"></a> Solutions</h3><ul><li>dfs</li><li>bfs</li><li>union find</li></ul><h2 id="making-a-large-island"><a class="markdownIt-Anchor" href="#making-a-large-island"></a> Making a large Island</h2><p><a href="https://leetcode.com/problems/making-a-large-island/">https://leetcode.com/problems/making-a-large-island/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;union-find&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#union-find&quot;&gt;&lt;/a&gt; Union Find&lt;/h2&gt;
&lt;h2 id=&quot;largest-component-size-by-common-factor&quot;&gt;&lt;a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sliding window</title>
    <link href="https://deyikong.github.io/2022/05/06/sliding-window/"/>
    <id>https://deyikong.github.io/2022/05/06/sliding-window/</id>
    <published>2022-05-06T03:10:43.000Z</published>
    <updated>2023-02-14T07:37:15.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="thoughts"><a class="markdownIt-Anchor" href="#thoughts"></a> Thoughts</h1><p>Periodical logic:</p><ul><li>before k is filled, skip or special case</li><li>after k is filled, + end, - start.<ul><li>solve sub-problems in the window, it could be maximum, minimum, average in int, average in double, sum(overflow warning) etc.</li></ul></li></ul><p>Notes:</p><ul><li>if it’s a fixed size array, most of the time, we don’t need additional data structures, just the index</li><li>if it’s a data stream, we might need to save the elements in the window in an array, deque, linkedlist, etc.</li></ul><p>Method:</p><ul><li>outline sliding window<ul><li>pick data structure or index</li></ul></li><li>focus on inside each window,<ul><li>only three things/steps to do:<ul><li>delete (if fixed size, in order not to be overriden, delete before insert)</li><li>insert</li><li>process and save</li></ul></li><li>list all the cases for each step</li><li>might need extra structure, changing states based on inserting and deleting elements, deque</li></ul></li></ul><h2 id="moving-average-from-data-stream"><a class="markdownIt-Anchor" href="#moving-average-from-data-stream"></a> Moving Average from Data Stream</h2><p><a href="https://leetcode.com/problems/moving-average-from-data-stream/">https://leetcode.com/problems/moving-average-from-data-stream/</a></p><h3 id="solutions"><a class="markdownIt-Anchor" href="#solutions"></a> Solutions</h3><ul><li>two period:<ul><li>before k values are filled</li><li>after k values are filled</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MovingAverage</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span>[] window = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovingAverage</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.size = size; </span><br><span class="line">        window = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// move tail</span></span><br><span class="line">        tail = tail == size - <span class="number">1</span> ? <span class="number">0</span> : tail+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// delete</span></span><br><span class="line">        <span class="keyword">if</span> (++count &gt; size) &#123;</span><br><span class="line">           sum -= window[tail];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// insert</span></span><br><span class="line">        window[tail] = val;</span><br><span class="line">        sum += val;</span><br><span class="line">        <span class="comment">// save</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)sum / Math.min(count, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MovingAverage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span>[] window = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovingAverage</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.size = size; </span><br><span class="line">        window = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        curSize++;</span><br><span class="line">       <span class="keyword">if</span> (curSize &lt;= <span class="built_in">this</span>.size) &#123;</span><br><span class="line">           window[curSize - <span class="number">1</span>] = val;</span><br><span class="line">           sum+=val;</span><br><span class="line">            <span class="keyword">return</span> sum / curSize;        </span><br><span class="line">       &#125;</span><br><span class="line">       sum -= window[i]; </span><br><span class="line">        window[i] = val;</span><br><span class="line">        sum+=val;</span><br><span class="line">       <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> sum / size; </span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i == size) i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="k-radius-subarray-average"><a class="markdownIt-Anchor" href="#k-radius-subarray-average"></a> K Radius Subarray Average</h2><p><a href="https://leetcode.com/problems/k-radius-subarray-averages/">https://leetcode.com/problems/k-radius-subarray-averages/</a></p><h3 id="solutions-2"><a class="markdownIt-Anchor" href="#solutions-2"></a> Solutions</h3><ul><li>use end as i, update the middle. could do one pass, or fill with -1 first</li><li>trick, sum might be overflowing, so use double.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getAverages(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span> <span class="variable">windowLength</span> <span class="operator">=</span> <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &gt;= m) &#123;</span><br><span class="line">            Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">// before and after</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; windowLength - <span class="number">1</span>) &#123;</span><br><span class="line">                res[i] = -<span class="number">1</span>;</span><br><span class="line">                sum = nums[i] + sum;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// in between</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i - windowLength &lt; <span class="number">0</span> ? <span class="number">0</span> : nums[i - windowLength];</span><br><span class="line">            sum = sum + end - start;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= m - k) &#123;</span><br><span class="line">               res[i] = -<span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            res[i - k] = (<span class="type">int</span>)(sum / (<span class="type">double</span>)windowLength);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sliding-window-maximum"><a class="markdownIt-Anchor" href="#sliding-window-maximum"></a> Sliding window maximum</h2><p><a href="https://leetcode.com/problems/sliding-window-maximum/solution/">https://leetcode.com/problems/sliding-window-maximum/solution/</a></p><h3 id="solutions-3"><a class="markdownIt-Anchor" href="#solutions-3"></a> Solutions</h3><ul><li>pick the right data structure</li><li>outline the window</li><li>follow three steps: insert, delete and save</li><li>idea: monotonous stack/queue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//.    index</span></span><br><span class="line">        Deque&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// before k - 1</span></span><br><span class="line">            <span class="comment">// insert</span></span><br><span class="line">            <span class="keyword">while</span> (!pq.isEmpty() &amp;&amp; nums[i] &gt; nums[pq.peekLast()]) &#123;</span><br><span class="line">                pq.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            pq.offerLast(i);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// delete</span></span><br><span class="line">            <span class="keyword">if</span> (pq.peekFirst() == i - k) pq.pollFirst(); </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// after k is filled, add local solution to global solution             </span></span><br><span class="line">           <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) &#123;</span><br><span class="line">               ans[i - k + <span class="number">1</span>] = nums[pq.peek()];</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;thoughts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#thoughts&quot;&gt;&lt;/a&gt; Thoughts&lt;/h1&gt;
&lt;p&gt;Periodical logic:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before k is filled, ski</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Thoughts on OOP</title>
    <link href="https://deyikong.github.io/2022/04/28/Thoughts-on-OOP/"/>
    <id>https://deyikong.github.io/2022/04/28/Thoughts-on-OOP/</id>
    <published>2022-04-28T01:13:43.000Z</published>
    <updated>2023-02-14T07:37:15.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="how-to-approach-oop-interview-questions"><a class="markdownIt-Anchor" href="#how-to-approach-oop-interview-questions"></a> How to approach OOP interview questions</h1><p>If you have problems with OOP technical interviews, here are some pointers on how to approach this kind of problems.</p><ol><li>outline (bottom up): write all the classes/components from small scope to big scope</li><li>implementation (top down): write all method signatures from big scope to small scope.</li></ol><ul><li>for the biggest class, start with the constructor, properties and then methods from the requirements(use cases, properties).</li><li>for the smaller classes, requirements are from their upper classes’ implementation details + initial requirements(use cases, properties).</li></ul><ol start="3"><li>changes (bottom up): if there’s any structural changes(deletion, addition, modification) on a particular part of the code, trace all places that used these changed part bottom up.</li></ol><p>For example, designing an Excel, each cell has it’s own styles(font, size, color, etc), each cell can have different types of data(integer, string, boolean, etc), users can append or insert rows or columns</p><h2 id="first-step-outlinebottom-up"><a class="markdownIt-Anchor" href="#first-step-outlinebottom-up"></a> First step: outline(bottom up)：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cell</span>&lt;T&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Row</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheet</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="second-step-implementation-top-down"><a class="markdownIt-Anchor" href="#second-step-implementation-top-down"></a> Second Step: implementation (top down):</h2><h3 id="start-filling-the-classes-from-top-down"><a class="markdownIt-Anchor" href="#start-filling-the-classes-from-top-down"></a> start filling the classes from top down</h3><p>Start with the Sheet’s constructor and some properties, on first thought, we just need an empty constructor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Sheet</span> <span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>However, because we might need the dimension of the sheet upon constructing, either passed by user or by default. so we need a list of rows first, and the global column.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Row&gt; sheet = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Row&gt;();</span><br><span class="line"><span class="type">int</span> column;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sheet</span> <span class="params">()</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sheet</span> <span class="params">(<span class="type">int</span> row, <span class="type">int</span> column)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.column = column; </span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">     sheet.add(<span class="keyword">new</span> <span class="title class_">Row</span>(column));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice, after we finished up the code above, we already added more requirements for the subclass <code>Row</code> like <code>new Row(column)</code>.</p><p>Then based on the requirements, we have <code>appendRow</code>, <code>insertRow</code>, <code>appendColumn</code>, <code>insertColumn</code> 4 functions for sheet, let’s implement them.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendRow</span><span class="params">()</span> &#123;</span><br><span class="line">    sheet.add(<span class="keyword">new</span> <span class="title class_">Row</span>(column));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRow</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    sheet.add(idx, <span class="keyword">new</span> <span class="title class_">Row</span>(column));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert and append Col</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendColumn</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; sheet.size(); j++) &#123;</span><br><span class="line">        sheet.get(j).add(<span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.column++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertColumn</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (Row row : sheet) &#123;</span><br><span class="line">       row.add(idx, <span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">   &#125; </span><br><span class="line">    <span class="built_in">this</span>.column++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So based on code above, we can conclude the Cell’s constructor signature <code>new Cell(&quot;&quot;)</code>, and also <code>Row</code>’s method to add a cell <code>row.add(new Cell(&quot;))</code></p><p>Now, let’s move to the next level of class, which is <code>Row</code>.<br />First, let’s start with the constructor, based on the codes we added to <code>Sheet</code>’s class, we already have our signature.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Cell&gt; row = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Cell&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Row</span> <span class="params">(<span class="type">int</span> column)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; column; i++)</span><br><span class="line">        row.add(<span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and we also know we need <code>add</code> functions for <code>Row</code> class too, one for <code>appendRow</code>, another for <code>insertRow</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Cell cell)</span> &#123;</span><br><span class="line">   row.add(cell); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> idx, Cell cell)</span> &#123;</span><br><span class="line">   row.add(idx, cell); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it for now for <code>Row</code></p><p>Lastly(for now), we need to complete our <code>Cell</code>.<br />Last also start with the constructor, we already know the signature from the code above.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T content;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cell</span> <span class="params">(T content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because we want to add font, size, color, properties to each <code>Cell</code>, let add these here</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">font</span> <span class="operator">=</span> <span class="string">&quot;Hei&quot;</span> ;</span><br><span class="line"><span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">bold</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>That’s pretty much it if that’s all we need to do.</p><p>However, if we think a little deeper or more realistic, we need a way to update each cell’s data, so let’s do that too.</p><p>Let’s go top down again from Sheet.</p><figure class="highlight java"><figcaption><span>add to Sheet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column, String content)</span> &#123;</span><br><span class="line">    sheet.get(row).set(column, <span class="keyword">new</span> <span class="title class_">Cell</span>&lt;String&gt;(content));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column, Integer content)</span> &#123;</span><br><span class="line">    sheet.get(row).set(column, <span class="keyword">new</span> <span class="title class_">Cell</span>&lt;Integer&gt;(content));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column, Boolean content)</span> &#123;</span><br><span class="line">    sheet.get(row).set(column, <span class="keyword">new</span> <span class="title class_">Cell</span>&lt;Boolean&gt;(content));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This, in turns, determines one function <code>set</code> for <code>Row</code>, so let’s do that.</p><figure class="highlight java"><figcaption><span>add to Row</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> col,Cell cell)</span> &#123;</span><br><span class="line">    row.set(col, cell); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That’s it, if we want to update cells.</p><h2 id="third-step-changes-bottom-up"><a class="markdownIt-Anchor" href="#third-step-changes-bottom-up"></a> Third Step: Changes (bottom up)</h2><h3 id="in-our-current-situation-we-have-font-size-and-bold-in-each-cell-however-what-if-we-want-to-select-a-range-of-cells-and-apply-the-same-style-to-these-cells-so-that-requires-changes-in-our-cell-class-so-lets-create-a-style-class-thats-shared-across-more-than-one-cell"><a class="markdownIt-Anchor" href="#in-our-current-situation-we-have-font-size-and-bold-in-each-cell-however-what-if-we-want-to-select-a-range-of-cells-and-apply-the-same-style-to-these-cells-so-that-requires-changes-in-our-cell-class-so-lets-create-a-style-class-thats-shared-across-more-than-one-cell"></a> In our current situation, we have <code>font</code>, <code>size</code> and <code>bold</code> in each <code>Cell</code>, however, what if we want to select a range of cells and apply the same style to these Cells. so that requires changes in our <code>Cell</code> class, so let’s create a <code>Style</code> class that’s shared across more than one Cell.</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cell</span>&lt;T&gt; &#123;</span><br><span class="line">    Style style;</span><br><span class="line">    T content;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cell</span> <span class="params">(T content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(content, <span class="keyword">new</span> <span class="title class_">Style</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cell</span> <span class="params">(T content, Style style)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">        <span class="built_in">this</span>.style = style;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Style</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">font</span> <span class="operator">=</span> <span class="string">&quot;Hei&quot;</span> ;</span><br><span class="line">    <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">bold</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Noticed that we added a style as a constructor param to <code>Cell</code>, you don’t have to add it to the constructor if you want to create a setter(in java) or a property(in C#) or a variable (in PHP).</p><p>Now, because we changed the cell, we need to go bottom-up styles to fix all the places it sifts up to. Let’s keep a mental queue to add what we need to modify next (just like BFS*).</p><p>So in <code>Row</code>’s constructors, we have two <code>new</code> statements, let’s change that.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Row</span> <span class="params">(<span class="type">int</span> column)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; column; i++)</span><br><span class="line">        row.add(<span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Row</span> <span class="params">(<span class="type">int</span> column, Style style)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; column; i++)</span><br><span class="line">        row.add(<span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>, style));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We kept the previous constructor and overloaded a new constructor with a <code>Style</code> object for the whole row<br />Let’s keep looking up the usage of <code>Cell</code> while adding <code>Row</code> to the queue to look up next.<br />We found <code>appendColumn</code>, <code>insertColumn</code> and all the <code>update</code>s in <code>Sheet</code> that use <code>Cell</code>s constructor, let’s change that.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// insert and append Col</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendColumn</span><span class="params">()</span> &#123; </span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; sheet.size(); j++) &#123;</span><br><span class="line">         sheet.get(j).add(<span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>, style));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">this</span>.column++;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertColumn</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Row row : sheet) &#123;</span><br><span class="line">        row.add(idx, <span class="keyword">new</span> <span class="title class_">Cell</span>(<span class="string">&quot;&quot;</span>, style));</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="built_in">this</span>.column++;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">// update </span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column, String content)</span> &#123;</span><br><span class="line">     <span class="type">Style</span> <span class="variable">s</span> <span class="operator">=</span> sheet.get(row).get(column).style;</span><br><span class="line">     sheet.get(row).set(column, <span class="keyword">new</span> <span class="title class_">Cell</span>&lt;String&gt;(content, s));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column, Integer content)</span> &#123;</span><br><span class="line">     <span class="type">Style</span> <span class="variable">s</span> <span class="operator">=</span> sheet.get(row).get(column).style;</span><br><span class="line">     sheet.get(row).set(column, <span class="keyword">new</span> <span class="title class_">Cell</span>&lt;Integer&gt;(content, s));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> column, Boolean content)</span> &#123;</span><br><span class="line">     <span class="type">Style</span> <span class="variable">s</span> <span class="operator">=</span> sheet.get(row).get(column).style;</span><br><span class="line">     sheet.get(row).set(column, <span class="keyword">new</span> <span class="title class_">Cell</span>&lt;Boolean&gt;(content, s));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>Notice that when we update, we keep the old style and assign it to the new cell created.</p><p>Also, this means we need to have a global <code>style</code> in the sheet, and initialize the style in the constructor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Style style;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sheet</span> <span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Sheet</span> <span class="params">(<span class="type">int</span> row, <span class="type">int</span> column)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.column = column; </span><br><span class="line">    style = <span class="keyword">new</span> <span class="title class_">Style</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        sheet.add(<span class="keyword">new</span> <span class="title class_">Row</span>(column));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After that, we are done with <code>Cell</code>’s changes(bottom up), but we are done yet, remember, we added the <code>Row</code>’s constructor to the queue, now let’s look at the places where <code>Row</code>’s constructor is used.</p><p>We found the usages in <code>Sheet</code>’s constructor, <code>appendRow</code> and <code>insertRow</code>.<br />For the <code>Sheet</code>’s constructor, either we update it to <code>sheet.add(new Row(column, style))</code> or just keep what it is if you don’t care about the extra same styles created for each <code>Cell</code>. A better solution is sharing the same style, so let’s do that.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Sheet</span> <span class="params">(<span class="type">int</span> row, <span class="type">int</span> column)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.column = column; </span><br><span class="line">    style = <span class="keyword">new</span> <span class="title class_">Style</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">        sheet.add(<span class="keyword">new</span> <span class="title class_">Row</span>(column, style));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for <code>appendRow</code>, and <code>insertRow</code>, let’s change them.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert and append Row</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendRow</span><span class="params">()</span> &#123;</span><br><span class="line">    sheet.add(<span class="keyword">new</span> <span class="title class_">Row</span>(column, style));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertRow</span><span class="params">(<span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    sheet.add(idx, <span class="keyword">new</span> <span class="title class_">Row</span>(column, style));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since this is the biggest class, they are not used anywhere, so we don’t need to add the changes to the queue(that’s not always the case though).<br />So the queue is empty now, so that means we are done with the effect by extracting styles to a <code>Style</code> object.</p><p>Viola, that’s it.</p><p>If you want to read the complete code, here’s the <a href="https://leetcode.com/playground/JrKZZcjh">link</a>, I also added codes to apply styles to a range of cells over there.</p><p><strong>Notes</strong> *Overall programming habit, BFS: don’t program too deep when there’s a thought, just go down 1 step down and just write the signature and keep writing.</p>]]></content>
    
    
    <summary type="html">Object Oriented Programming Guide</summary>
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="interview" scheme="https://deyikong.github.io/tags/interview/"/>
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="OOP" scheme="https://deyikong.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Kth Biggest</title>
    <link href="https://deyikong.github.io/2022/04/21/Kth-Biggest/"/>
    <id>https://deyikong.github.io/2022/04/21/Kth-Biggest/</id>
    <published>2022-04-21T02:13:31.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kth-largest-element-in-an-array"><a class="markdownIt-Anchor" href="#kth-largest-element-in-an-array"></a> Kth Largest Element in an Array</h2><p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">https://leetcode.com/problems/kth-largest-element-in-an-array/</a></p><h3 id="solutions"><a class="markdownIt-Anchor" href="#solutions"></a> Solutions</h3><ul><li>sort</li><li>max heap</li><li>min heap</li><li>quick select</li></ul><figure class="highlight java"><figcaption><span>min heap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;((a, b) -&gt; a - b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            pq.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> pq.peek(); </span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; top) &#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">                pq.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pq.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>quickselect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(nums, start, end); </span><br><span class="line">            <span class="keyword">if</span> (p == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[p];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p &gt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                end = p - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p &lt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                start = p + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> s, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == e) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> nums[e];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s - <span class="number">1</span>, j = s;</span><br><span class="line">        <span class="comment">//loop invariant, left of i is all smaller than p, including i. between i and j are all bigger than p</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; e) &#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[j] &gt; p) &#123;</span><br><span class="line">               i++;</span><br><span class="line">               swap(nums, i, j);</span><br><span class="line">           &#125; </span><br><span class="line">           j++;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, i+<span class="number">1</span>, e);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kth-largest-element-in-an-array&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#kth-largest-element-in-an-array&quot;&gt;&lt;/a&gt; Kth Largest Element in an</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="algorithms" scheme="https://deyikong.github.io/tags/algorithms/"/>
    
    <category term="kth biggest" scheme="https://deyikong.github.io/tags/kth-biggest/"/>
    
  </entry>
  
  <entry>
    <title>Bucket Sort</title>
    <link href="https://deyikong.github.io/2022/04/12/Bucket-Sort-And-Meeting-Rooms/"/>
    <id>https://deyikong.github.io/2022/04/12/Bucket-Sort-And-Meeting-Rooms/</id>
    <published>2022-04-12T05:05:41.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扫描线问题-line-sweep"><a class="markdownIt-Anchor" href="#扫描线问题-line-sweep"></a> 扫描线问题 Line Sweep</h1><h2 id="range-addition"><a class="markdownIt-Anchor" href="#range-addition"></a> Range Addition</h2><p><a href="https://leetcode.com/problems/range-addition/">https://leetcode.com/problems/range-addition/</a></p><h3 id="solutions"><a class="markdownIt-Anchor" href="#solutions"></a> Solutions</h3><ul><li>S1. normal O(n * k)</li><li>S2. only update start and end+1 to get an array of difference,  O(n + k),<ul><li>how to come up with this thought:<ul><li>loop order from left to right, order plays a key part</li><li>record the difference</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getModifiedArray(<span class="type">int</span> length, <span class="type">int</span>[][] updates) &#123;</span><br><span class="line">       <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[length]; </span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> updates.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">            res[updates[i][<span class="number">0</span>]] += updates[i][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span> (updates[i][<span class="number">1</span>] + <span class="number">1</span> &lt; length) &#123;</span><br><span class="line">                res[updates[i][<span class="number">1</span>] + <span class="number">1</span>] -= updates[i][<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] + res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="similar-problem-as-above-car-pooling"><a class="markdownIt-Anchor" href="#similar-problem-as-above-car-pooling"></a> Similar problem as above, Car Pooling</h2><p><a href="https://leetcode.com/problems/car-pooling/">https://leetcode.com/problems/car-pooling/</a></p><h3 id="solutions-2"><a class="markdownIt-Anchor" href="#solutions-2"></a> Solutions</h3><ul><li>bucket sort</li><li>timestamp, TreeMap</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">carPooling</span><span class="params">(<span class="type">int</span>[][] trips, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1000</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; trips.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trips[i][<span class="number">0</span>] &gt; capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            res[trips[i][<span class="number">1</span>] - <span class="number">1</span>] += trips[i][<span class="number">0</span>];</span><br><span class="line">            res[trips[i][<span class="number">2</span>] - <span class="number">1</span>] -= trips[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] + res[i];</span><br><span class="line">            <span class="keyword">if</span> (res[i] &gt; capacity) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">carPooling</span><span class="params">(<span class="type">int</span>[][] trips, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Map&lt;Integer, Integer&gt; timestamps = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; trips.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trips[i][<span class="number">0</span>] &gt; capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            timestamps.put(trips[i][<span class="number">1</span>], timestamps.getOrDefault(trips[i][<span class="number">1</span>], <span class="number">0</span>) + trips[i][<span class="number">0</span>]);</span><br><span class="line">            timestamps.put(trips[i][<span class="number">2</span>], timestamps.getOrDefault(trips[i][<span class="number">2</span>], <span class="number">0</span>) - trips[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">usedCapacity</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> change : timestamps.values()) &#123;</span><br><span class="line">            usedCapacity += change;</span><br><span class="line">            <span class="keyword">if</span> (usedCapacity &gt; capacity) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="corporate-flight-booking"><a class="markdownIt-Anchor" href="#corporate-flight-booking"></a> Corporate Flight Booking</h2><p><a href="https://leetcode.com/problems/corporate-flight-bookings/">https://leetcode.com/problems/corporate-flight-bookings/</a></p><h2 id="solutions-3"><a class="markdownIt-Anchor" href="#solutions-3"></a> Solutions</h2><ul><li>same as above</li></ul><h2 id="meeting-room-ii"><a class="markdownIt-Anchor" href="#meeting-room-ii"></a> Meeting Room II</h2><p><a href="https://leetcode.com/problems/meeting-rooms-ii/">https://leetcode.com/problems/meeting-rooms-ii/</a></p><h3 id="solutions-4"><a class="markdownIt-Anchor" href="#solutions-4"></a> Solutions</h3><ul><li>TreeMap</li><li>PriorityQueue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMeetingRooms</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; timestamps = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval: intervals) &#123;</span><br><span class="line">            timestamps.put(interval[<span class="number">0</span>], timestamps.getOrDefault(interval[<span class="number">0</span>], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            timestamps.put(interval[<span class="number">1</span>], timestamps.getOrDefault(interval[<span class="number">1</span>], <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> timestamp : timestamps.values()) &#123;</span><br><span class="line">           last += timestamp;</span><br><span class="line">            max = Math.max(max, last);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMeetingRooms</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// base case, if there&#x27;s no intervals, return 0</span></span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// min heap</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; allocator = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;(</span><br><span class="line">            intervals.length,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer a, Integer b)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> a - b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Sort the intervals by start time</span></span><br><span class="line">        Arrays.sort(</span><br><span class="line">            intervals,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// add the first meeting</span></span><br><span class="line">        allocator.add(intervals[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Interate over remaining intervals</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// If the earliest room is free, assign this room to this meeting</span></span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= allocator.peek()) &#123;</span><br><span class="line">                allocator.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//if a new room is to be assigned, add it to the heap. </span></span><br><span class="line">            allocator.add(intervals[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> allocator.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="252-meeting-room"><a class="markdownIt-Anchor" href="#252-meeting-room"></a> 252 meeting room</h2><p><a href="https://leetcode.com/problems/meeting-rooms/">https://leetcode.com/problems/meeting-rooms/</a></p><h2 id="253-meeting-room-ii"><a class="markdownIt-Anchor" href="#253-meeting-room-ii"></a> 253 meeting room II</h2><p><a href="https://leetcode.com/problems/meeting-rooms-ii/">https://leetcode.com/problems/meeting-rooms-ii/</a></p><h2 id="56-merge-interval"><a class="markdownIt-Anchor" href="#56-merge-interval"></a> 56 merge interval</h2><p><a href="https://leetcode.com/problems/merge-intervals/">https://leetcode.com/problems/merge-intervals/</a></p><h2 id="1272-remove-interval"><a class="markdownIt-Anchor" href="#1272-remove-interval"></a> 1272 Remove interval</h2><p><a href="https://leetcode.com/problems/remove-interval/">https://leetcode.com/problems/remove-interval/</a></p><h2 id="435-non-overlapping-intervals"><a class="markdownIt-Anchor" href="#435-non-overlapping-intervals"></a> 435 non overlapping intervals</h2><p><a href="https://leetcode.com/problems/non-overlapping-intervals/">https://leetcode.com/problems/non-overlapping-intervals/</a></p><h2 id="1288-remove-covered-intervals"><a class="markdownIt-Anchor" href="#1288-remove-covered-intervals"></a> 1288 Remove Covered intervals</h2><p><a href="https://leetcode.com/problems/remove-covered-intervals/">https://leetcode.com/problems/remove-covered-intervals/</a></p><h2 id="1229-meeting-scheduler"><a class="markdownIt-Anchor" href="#1229-meeting-scheduler"></a> 1229 Meeting Scheduler</h2><p><a href="https://leetcode.com/problems/meeting-scheduler/">https://leetcode.com/problems/meeting-scheduler/</a></p><h2 id="986-interval-list-intersections"><a class="markdownIt-Anchor" href="#986-interval-list-intersections"></a> 986 interval list intersections</h2><p><a href="https://leetcode.com/problems/interval-list-intersections/">https://leetcode.com/problems/interval-list-intersections/</a></p><h2 id="759-employee-free-time"><a class="markdownIt-Anchor" href="#759-employee-free-time"></a> 759 Employee Free Time</h2><p><a href="https://leetcode.com/problems/employee-free-time/">https://leetcode.com/problems/employee-free-time/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;扫描线问题-line-sweep&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#扫描线问题-line-sweep&quot;&gt;&lt;/a&gt; 扫描线问题 Line Sweep&lt;/h1&gt;
&lt;h2 id=&quot;range-addition&quot;&gt;&lt;a class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Problems</title>
    <link href="https://deyikong.github.io/2022/04/05/Problems/"/>
    <id>https://deyikong.github.io/2022/04/05/Problems/</id>
    <published>2022-04-05T16:32:04.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04052022"><a class="markdownIt-Anchor" href="#04052022"></a> 04/05/2022</h1><h2 id="longest-common-prefix"><a class="markdownIt-Anchor" href="#longest-common-prefix"></a> Longest Common Prefix</h2><p><a href="https://leetcode.com/problems/longest-common-prefix/">https://leetcode.com/problems/longest-common-prefix/</a></p><h3 id="solutions"><a class="markdownIt-Anchor" href="#solutions"></a> Solutions:</h3><ul><li>horizontal scanning(from left to right)</li><li>vertical scanning(compare the ith char on all the elements each time)</li><li>divide and conquer</li><li>Binary search</li></ul><h3 id="follow-up"><a class="markdownIt-Anchor" href="#follow-up"></a> Follow up</h3><p>LCP called multiple times frequently</p><ul><li>use a trie<ul><li>node path must only have one child element</li><li>stop at the “isWord” node</li><li>must match the character</li></ul></li></ul><h2 id="letter-combinations-of-a-phone-number"><a class="markdownIt-Anchor" href="#letter-combinations-of-a-phone-number"></a> Letter Combinations of a phone number</h2><p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">https://leetcode.com/problems/letter-combinations-of-a-phone-number/</a></p><h3 id="solutions-2"><a class="markdownIt-Anchor" href="#solutions-2"></a> Solutions:</h3><ul><li>backtracking</li><li>DFS</li></ul><h2 id="remove-nth-node-from-end-of-list"><a class="markdownIt-Anchor" href="#remove-nth-node-from-end-of-list"></a> Remove Nth Node From End of List</h2><p><a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/">https://leetcode.com/problems/remove-nth-node-from-end-of-list/</a></p><h3 id="solutions-3"><a class="markdownIt-Anchor" href="#solutions-3"></a> Solutions</h3><ul><li>two pass, one to find the length, the other to find the first Node.</li></ul><h2 id="generate-parentheses"><a class="markdownIt-Anchor" href="#generate-parentheses"></a> Generate Parentheses</h2><p><a href="https://leetcode.com/problems/generate-parentheses/">https://leetcode.com/problems/generate-parentheses/</a></p><ul><li>DFS(permutation: only allow certain paths when conditions met)</li><li>Closure Number:  (To be reviewed)</li></ul><h2 id="swap-nodes-in-pairs"><a class="markdownIt-Anchor" href="#swap-nodes-in-pairs"></a> swap nodes in pairs</h2><p><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">https://leetcode.com/problems/swap-nodes-in-pairs/</a></p><ul><li>set up loop invariant and keep them. prev, first, second.</li></ul><h2 id="remove-element"><a class="markdownIt-Anchor" href="#remove-element"></a> remove element</h2><p><a href="https://leetcode.com/problems/remove-element/">https://leetcode.com/problems/remove-element/</a></p><h3 id="solutions-4"><a class="markdownIt-Anchor" href="#solutions-4"></a> Solutions</h3><ul><li>two pointer, slow fast pointer. copy over all the not equal elements</li><li>two pointer, opposite direction, reduce right pointer by one when equal.</li></ul><h2 id="implement-strstr"><a class="markdownIt-Anchor" href="#implement-strstr"></a> implement strstr</h2><p><a href="https://leetcode.com/problems/implement-strstr/">https://leetcode.com/problems/implement-strstr/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="type">char</span>[] hays = haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] needles = needle.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; hays.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; needles.length &amp;&amp; i+j &lt; hays.length &amp;&amp; hays[i+j] == needles[j]) &#123;</span><br><span class="line">               j++; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == needles.length) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="find-first-and-last-position-of-element-in-sorted-array"><a class="markdownIt-Anchor" href="#find-first-and-last-position-of-element-in-sorted-array"></a> Find First and Last Position of Element in Sorted Array</h2><p><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></p><h3 id="solutions-5"><a class="markdownIt-Anchor" href="#solutions-5"></a> solutions</h3><ul><li>binary search two ends. stop at two elements, because we might get into a dead loop.</li></ul><h2 id="count-and-say"><a class="markdownIt-Anchor" href="#count-and-say"></a> Count and Say</h2><p><a href="https://leetcode.com/problems/count-and-say/">https://leetcode.com/problems/count-and-say/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">     &#125; </span><br><span class="line">     </span><br><span class="line">     <span class="type">String</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="string">&quot;11&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">          prev = convert(prev);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> prev;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">convert</span><span class="params">(String prev)</span> &#123;</span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">      <span class="type">char</span>[] chars = prev.toCharArray();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">          <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> chars[i];</span><br><span class="line">          <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">while</span> (i+<span class="number">1</span> &lt; chars.length &amp;&amp; chars[i+<span class="number">1</span>] == c) &#123;</span><br><span class="line">             count++; </span><br><span class="line">              i++;</span><br><span class="line">          &#125; </span><br><span class="line">          sb.append(count);</span><br><span class="line">          sb.append(c);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sb.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="combination-sum"><a class="markdownIt-Anchor" href="#combination-sum"></a> Combination Sum</h2><p><a href="https://leetcode.com/problems/combination-sum/">https://leetcode.com/problems/combination-sum/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        combine(candidates, <span class="number">0</span>, target, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">combine</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> level, <span class="type">int</span> target, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (level == candidates.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count * candidates[level] &lt;= target) &#123;</span><br><span class="line">            List&lt;Integer&gt; copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                copy.add(candidates[level]);</span><br><span class="line">            &#125;</span><br><span class="line">            combine(candidates, level + <span class="number">1</span>, target - count * candidates[level], copy);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jump-game-ii"><a class="markdownIt-Anchor" href="#jump-game-ii"></a> Jump game II</h2><p><a href="https://leetcode.com/problems/jump-game-ii/">https://leetcode.com/problems/jump-game-ii/</a></p><h3 id="solutions-6"><a class="markdownIt-Anchor" href="#solutions-6"></a> Solutions</h3><ul><li>dp N^2</li><li>BFS, N</li><li>greedy</li></ul><h1 id="04062022"><a class="markdownIt-Anchor" href="#04062022"></a> 04/06/2022</h1><h2 id="permutations"><a class="markdownIt-Anchor" href="#permutations"></a> Permutations</h2><p><a href="https://leetcode.com/problems/permutations/">https://leetcode.com/problems/permutations/</a></p><h3 id="solutions-7"><a class="markdownIt-Anchor" href="#solutions-7"></a> Solutions</h3><ul><li>key point: fill each spot with available elements</li><li>dps</li><li>swap swap</li></ul><h2 id="combination-sum-ii"><a class="markdownIt-Anchor" href="#combination-sum-ii"></a> Combination Sum II</h2><p><a href="https://leetcode.com/problems/combination-sum-ii/">https://leetcode.com/problems/combination-sum-ii/</a></p><h3 id="solutions-8"><a class="markdownIt-Anchor" href="#solutions-8"></a> Solutions</h3><ul><li>think of each element can only show up on a level repeated times</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(candidates).sum();</span><br><span class="line">    <span class="keyword">if</span> (target &gt; sum) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(candidates);</span><br><span class="line">    dps(candidates, target, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()); </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dps</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> idx, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">        res.add(list);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (idx &gt;= candidates.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nextUnique</span> <span class="operator">=</span> idx + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (nextUnique &lt; candidates.length &amp;&amp; candidates[nextUnique] == candidates[idx]) &#123;</span><br><span class="line">       nextUnique++; </span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> target - i * candidates[idx];</span><br><span class="line">        <span class="keyword">if</span> (rem &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        List&lt;Integer&gt; copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list); </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            copy.add(candidates[idx]);</span><br><span class="line">        &#125;</span><br><span class="line">        dps(candidates, rem, nextUnique, copy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="permutations-ii-with-duplicated-elements"><a class="markdownIt-Anchor" href="#permutations-ii-with-duplicated-elements"></a> Permutations II (with duplicated elements)</h2><p><a href="https://leetcode.com/problems/permutations-ii/">https://leetcode.com/problems/permutations-ii/</a></p><h3 id="solutions-9"><a class="markdownIt-Anchor" href="#solutions-9"></a> Solutions</h3><ul><li>sort array</li><li>use a set to check on each level to see if the element was added already</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    permute(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">   <span class="keyword">if</span> (idx == n) &#123;</span><br><span class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           list.add(nums[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       res.add(list);</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">   &#125; </span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="comment">// not adding current </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> idx; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (set.contains(nums[k])) &#123;</span><br><span class="line">           <span class="keyword">continue</span>; </span><br><span class="line">        &#125;</span><br><span class="line">           swap(nums, idx, k); </span><br><span class="line">           permute(nums, idx + <span class="number">1</span>);</span><br><span class="line">           swap(nums, idx, k); </span><br><span class="line">        set.add(nums[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">    nums[j] = nums[i];</span><br><span class="line">    nums[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="powerx-n"><a class="markdownIt-Anchor" href="#powerx-n"></a> Power(x, n)</h2><p><a href="https://leetcode.com/problems/powx-n/">https://leetcode.com/problems/powx-n/</a></p><h3 id="solutions-10"><a class="markdownIt-Anchor" href="#solutions-10"></a> Solutions</h3><ul><li>cut in half each time, dp to remember half.</li><li>check negative and odd situation</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span> / helper(x, -n);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> helper(x, n);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">helper</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">       <span class="type">double</span> <span class="variable">halfValue</span> <span class="operator">=</span> helper(x, half);</span><br><span class="line">       <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> n % <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">if</span> (mod != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> halfValue * halfValue * x; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> halfValue * halfValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="spiral-matrix"><a class="markdownIt-Anchor" href="#spiral-matrix"></a> Spiral Matrix</h2><p><a href="https://leetcode.com/problems/spiral-matrix/">https://leetcode.com/problems/spiral-matrix/</a></p><h3 id="solutions-11"><a class="markdownIt-Anchor" href="#solutions-11"></a> Solutions</h3><ul><li>separate directions</li><li>check boundary</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">       <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">       <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">       <span class="type">int</span> <span class="variable">layers</span> <span class="operator">=</span> (Math.min(row, col) + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; layers; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">innerRow</span> <span class="operator">=</span> row - <span class="number">2</span> * i;</span><br><span class="line">           <span class="type">int</span> <span class="variable">innerCol</span> <span class="operator">=</span> col - <span class="number">2</span> * i;</span><br><span class="line">           <span class="keyword">if</span> (innerCol == <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; innerRow; j++) &#123;</span><br><span class="line">                   res.add(matrix[i + j][i]);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> res;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (innerRow == <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; innerCol; j++) &#123;</span><br><span class="line">                   res.add(matrix[i][i + j]);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> res;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// print top line</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; innerCol - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               res.add(matrix[i][i + j]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// print right line</span></span><br><span class="line">           <span class="keyword">if</span> (col - i - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; innerRow - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                   res.add(matrix[i + j][col - i -<span class="number">1</span>]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// print bottom line</span></span><br><span class="line">           <span class="keyword">if</span> (row - i - <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; innerCol - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                   res.add(matrix[row - i - <span class="number">1</span>][col - i - <span class="number">1</span> - j]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// print left line</span></span><br><span class="line">           <span class="keyword">if</span> (i &lt; col) &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; innerRow - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                   res.add(matrix[row - i - <span class="number">1</span> - j][i]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="jump-game"><a class="markdownIt-Anchor" href="#jump-game"></a> Jump Game</h2><p><a href="https://leetcode.com/problems/jump-game/">https://leetcode.com/problems/jump-game/</a></p><h3 id="solutions-12"><a class="markdownIt-Anchor" href="#solutions-12"></a> Solutions</h3><ul><li>go from left to right</li><li>remember last reachable element</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">      <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i &gt; last) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> nums[i] + i;</span><br><span class="line">          <span class="keyword">if</span> (next &gt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          last = Math.max(next, last);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="spiral-matrix-ii-fill-out-a-matrix-spirally"><a class="markdownIt-Anchor" href="#spiral-matrix-ii-fill-out-a-matrix-spirally"></a> Spiral Matrix II (fill out a matrix spirally )</h2><p><a href="https://leetcode.com/problems/spiral-matrix-ii/">https://leetcode.com/problems/spiral-matrix-ii/</a></p><h3 id="solutions-13"><a class="markdownIt-Anchor" href="#solutions-13"></a> Solutions</h3><ul><li>different directions</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> n * n;</span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">layers</span> <span class="operator">=</span> (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">       <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; layers; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> n - <span class="number">2</span> * i;</span><br><span class="line">           <span class="keyword">if</span> (l == <span class="number">1</span>) &#123;</span><br><span class="line">               res[i][i] = count;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// top</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               res[i][i + j] = count++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// right</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               res[i + j][n - i - <span class="number">1</span>] = count++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// bottom</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               res[n - i - <span class="number">1</span>][n - i - <span class="number">1</span> - j] = count++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// left</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; l - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               res[n - i - <span class="number">1</span> - j][i] = count++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="unique-paths"><a class="markdownIt-Anchor" href="#unique-paths"></a> unique paths</h2><p><a href="https://leetcode.com/problems/unique-paths/">https://leetcode.com/problems/unique-paths/</a></p><h3 id="solutions-14"><a class="markdownIt-Anchor" href="#solutions-14"></a> Solutions</h3><ul><li>dp</li><li>basic math: choose m - 1 or n - 1 from m - n - 2</li></ul><h2 id="unique-paths-ii-with-obstacles"><a class="markdownIt-Anchor" href="#unique-paths-ii-with-obstacles"></a> unique paths II (with obstacles)</h2><p><a href="https://leetcode.com/problems/unique-paths-ii/">https://leetcode.com/problems/unique-paths-ii/</a></p><h3 id="solutions-15"><a class="markdownIt-Anchor" href="#solutions-15"></a> solutions</h3><ul><li>dp</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> || obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">              dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j == <span class="number">0</span> ? <span class="number">0</span> : dp[i][j-<span class="number">1</span>]; </span><br><span class="line">                <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> i == <span class="number">0</span> ? <span class="number">0</span> : dp[i - <span class="number">1</span>][j]; </span><br><span class="line">                dp[i][j] = left + up;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="minimum-path-sum"><a class="markdownIt-Anchor" href="#minimum-path-sum"></a> Minimum path sum</h2><p><a href="https://leetcode.com/problems/minimum-path-sum/">https://leetcode.com/problems/minimum-path-sum/</a></p><h3 id="solutions-16"><a class="markdownIt-Anchor" href="#solutions-16"></a> Solutions</h3><ul><li>dp 2D</li><li>dp 1D</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>; </span><br><span class="line">           <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j == <span class="number">0</span> ? Integer.MAX_VALUE : dp[i][j-<span class="number">1</span>];</span><br><span class="line">           <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> i == <span class="number">0</span> ? Integer.MAX_VALUE : dp[i - <span class="number">1</span>][j];</span><br><span class="line">           dp[i][j] = Math.min(left, up) + grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">continue</span>; </span><br><span class="line">           <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">               dp[j] = dp[j] + grid[i][j];</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j == <span class="number">0</span> ? Integer.MAX_VALUE : dp[j - <span class="number">1</span>];</span><br><span class="line">           <span class="type">int</span> <span class="variable">up</span> <span class="operator">=</span> i == <span class="number">0</span> ? Integer.MAX_VALUE : dp[j];</span><br><span class="line">           dp[j] = Math.min(left, up) + grid[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set-matrix-zeros"><a class="markdownIt-Anchor" href="#set-matrix-zeros"></a> Set Matrix Zeros</h2><p><a href="https://leetcode.com/problems/set-matrix-zeroes/">https://leetcode.com/problems/set-matrix-zeroes/</a></p><h3 id="solutions-17"><a class="markdownIt-Anchor" href="#solutions-17"></a> solutions</h3><ul><li>use two sets</li><li>use first column and first row as marker</li></ul><h2 id="search-a-2d-matrix"><a class="markdownIt-Anchor" href="#search-a-2d-matrix"></a> search a 2d matrix</h2><p><a href="https://leetcode.com/problems/search-a-2d-matrix/">https://leetcode.com/problems/search-a-2d-matrix/</a></p><h3 id="solutions-18"><a class="markdownIt-Anchor" href="#solutions-18"></a> Solutions</h3><ul><li>get row and col like: mid / n; mid % n;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = m * n - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l)/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> mid / n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> mid % n;</span><br><span class="line">        <span class="keyword">if</span> (matrix[row][col] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (matrix[row][col] &gt; target) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="04072022"><a class="markdownIt-Anchor" href="#04072022"></a> 04/07/2022</h1><h2 id="sort-color"><a class="markdownIt-Anchor" href="#sort-color"></a> Sort color</h2><p><a href="https://leetcode.com/problems/sort-colors/">https://leetcode.com/problems/sort-colors/</a></p><h3 id="solutions-19"><a class="markdownIt-Anchor" href="#solutions-19"></a> Solutions</h3><ul><li>quicksort O(NlogN) (more general)</li><li>O(N), one pass solution<br />loop invariants:<br />three pointers, left i and right j, and cur</li><li>left elements of i are all zeros</li><li>right elements of j are all twos</li><li>elements between i and j  are all ones including i and j (this is not needed)</li></ul><p>initialization: start at cur = 0, i = 0, j = nums.length -1;<br />maintenance:</p><ul><li>if nums[cur] = 0, move it to the left of i, so swap with i and then move i to the right, then move cur to the right by one too.</li><li>if nums[cur] = 2, move it to the right of j, so swap with j and then move j to the left.</li><li>if nums[cur] = 1, ignore i or j, move cur to the right by one.<br />termination: cur &gt; j</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length -<span class="number">1</span>, cur = <span class="number">0</span>; </span><br><span class="line">      <span class="keyword">while</span> (cur &lt;= j) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nums[cur] == <span class="number">2</span>) &#123;</span><br><span class="line">              swap(nums, cur, j);</span><br><span class="line">              j--;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (nums[cur] == <span class="number">0</span>) &#123;</span><br><span class="line">              swap(nums, cur, i);</span><br><span class="line">              i++;</span><br><span class="line">              cur++;</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          cur++;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">      nums[i] = nums[j];</span><br><span class="line">      nums[j] = temp;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="subsets"><a class="markdownIt-Anchor" href="#subsets"></a> Subsets</h2><p><a href="https://leetcode.com/problems/subsets/">https://leetcode.com/problems/subsets/</a></p><h3 id="solutions-20"><a class="markdownIt-Anchor" href="#solutions-20"></a> solutions</h3><ul><li>backtracking (needs review)</li><li>dps, each level with or without the current element</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">       dps(nums, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()); </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dps</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> idx, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == nums.length) &#123; </span><br><span class="line">            res.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list); </span><br><span class="line">        dps(nums, idx + <span class="number">1</span>, copy);</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; copy2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list); </span><br><span class="line">        copy2.add(nums[idx]);</span><br><span class="line">        dps(nums, idx + <span class="number">1</span>, copy2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="word-search"><a class="markdownIt-Anchor" href="#word-search"></a> Word search</h2><p><a href="https://leetcode.com/problems/word-search/">https://leetcode.com/problems/word-search/</a></p><h3 id="solutions-21"><a class="markdownIt-Anchor" href="#solutions-21"></a> solutions</h3><ul><li>mark visited grid ‘#’ and then change it back after dps</li><li>pruning before dps would save time:<ul><li>check if word’s length is longer than total number of elements in grid</li><li>check if there’s any element that’s not in the grid</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (word.length() &gt; m * n) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        HashSet&lt;Character&gt; uniqueChars = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                uniqueChars.add(board[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!uniqueChars.contains(word.charAt(i))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == word.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">exist</span> <span class="operator">=</span> checkWord(board, i, j, word, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (exist) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkWord</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> i, <span class="type">int</span> j, String word, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= board.length || j &gt;= board[<span class="number">0</span>].length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">if</span> (board[i][j] == word.charAt(idx))&#123;</span><br><span class="line">               <span class="keyword">if</span> (idx == word.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">               &#125; </span><br><span class="line">               board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">up</span> <span class="operator">=</span> checkWord(board, i - <span class="number">1</span>, j, word, idx + <span class="number">1</span>);</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span>  checkWord(board, i, j - <span class="number">1</span>, word, idx + <span class="number">1</span>);</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span>  checkWord(board, i + <span class="number">1</span>, j, word, idx + <span class="number">1</span>);</span><br><span class="line">               <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> checkWord(board, i, j + <span class="number">1</span>, word, idx + <span class="number">1</span>);</span><br><span class="line">               board[i][j] = word.charAt(idx);</span><br><span class="line">               <span class="keyword">return</span> up || left || down || right; </span><br><span class="line">               </span><br><span class="line">           &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="remove-duplicates-from-sorted-array-ii"><a class="markdownIt-Anchor" href="#remove-duplicates-from-sorted-array-ii"></a> Remove duplicates from sorted array II</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/">https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/</a></p><h3 id="solutions-22"><a class="markdownIt-Anchor" href="#solutions-22"></a> Solutions</h3><ul><li>copy the last two elements of its kind instead of the first two because it might be overriden.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; nums.length; j++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (j + <span class="number">2</span> &gt;=  nums.length || nums[j] != nums[j + <span class="number">2</span>]) &#123;</span><br><span class="line">               nums[i] = nums[j];</span><br><span class="line">               i++;</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#04/08/2022</p><h2 id="search-in-rotated-sorted-array"><a class="markdownIt-Anchor" href="#search-in-rotated-sorted-array"></a> search in rotated sorted array</h2><p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></p><h3 id="solutions-23"><a class="markdownIt-Anchor" href="#solutions-23"></a> solutions</h3><ul><li>S1. find the pivot first, then binary search one of them</li><li>S2. one binary search, add more conditions to move left or right</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.length;</span><br><span class="line">       <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> nums[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">if</span> (target == first) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = m - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (mid + <span class="number">1</span> &lt; m &amp;&amp; nums[mid] &gt; nums[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                last = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= first)&#123;</span><br><span class="line">               start = mid + <span class="number">1</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               end = mid - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// first half</span></span><br><span class="line">        <span class="keyword">if</span> (target &gt; first) &#123;</span><br><span class="line">           <span class="keyword">return</span> binarySearch(nums, <span class="number">0</span>, last == <span class="number">0</span> ? m - <span class="number">1</span> : last, target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// last half</span></span><br><span class="line">           <span class="keyword">return</span> binarySearch(nums, last + <span class="number">1</span>, m - <span class="number">1</span>, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right-left)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(target == nums[mid])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt;= nums[right])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(target&gt;nums[mid]&amp;&amp;target&lt;=nums[right])</span><br><span class="line">                &#123;</span><br><span class="line">                    left = mid +<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right = mid -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(target&lt;nums[mid]&amp;&amp;target&gt;=nums[left])&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="search-in-rotated-sorted-array-ii"><a class="markdownIt-Anchor" href="#search-in-rotated-sorted-array-ii"></a> Search in Rotated Sorted Array II</h2><p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">https://leetcode.com/problems/search-in-rotated-sorted-array-ii/</a></p><h3 id="solutions-24"><a class="markdownIt-Anchor" href="#solutions-24"></a> Solutions</h3><ul><li>same as the first one except when trying to locate pivot, check which side the pivot it located in by checking to the right or left</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.length;</span><br><span class="line">       <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> nums[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">if</span> (target == first) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = m - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid + <span class="number">1</span> &lt; m &amp;&amp; nums[mid] &gt; nums[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                last = mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == first) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(count &lt; m &amp;&amp; nums[count] == nums[mid]) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (count == m) &#123;</span><br><span class="line">                   end = mid - <span class="number">1</span>; </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   start = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; first)&#123;</span><br><span class="line">               start = mid + <span class="number">1</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               end = mid - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// first half</span></span><br><span class="line">        <span class="keyword">if</span> (target &gt; first) &#123;</span><br><span class="line">           <span class="keyword">return</span> binarySearch(nums, <span class="number">0</span>, last == <span class="number">0</span> ? m - <span class="number">1</span> : last, target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// last half</span></span><br><span class="line">           <span class="keyword">return</span> binarySearch(nums, last + <span class="number">1</span>, m - <span class="number">1</span>, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="remove-duplicates-from-sorted-list"><a class="markdownIt-Anchor" href="#remove-duplicates-from-sorted-list"></a> Remove Duplicates from Sorted List</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">https://leetcode.com/problems/remove-duplicates-from-sorted-list/</a></p><h3 id="solutions-25"><a class="markdownIt-Anchor" href="#solutions-25"></a> Solutions</h3><ul><li>two pointer, prev and cur</li><li>loop invariants:<ul><li>everything left to prev including prev are all unique</li><li>move cur to the right without connecting if it’s the same as prev</li></ul></li></ul><h2 id="remove-duplicates-from-sorted-list-ii"><a class="markdownIt-Anchor" href="#remove-duplicates-from-sorted-list-ii"></a> Remove Duplicates from Sorted List II</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/solution/">https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/solution/</a></p><h3 id="solutions-26"><a class="markdownIt-Anchor" href="#solutions-26"></a> Solutions</h3><ul><li>Sentinel head solution: dummy head, because we are not sure what’s the head, so we check which is head first, then append it to the dummy head.</li><li>loop invariants:<ul><li>everything left to last are correct answer</li><li>set last.next to the first element of its kind, and then override it if it’s not the only element of its kind</li><li>move “last” if current element is different than the last element</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//loop invariants: cur </span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if two are the same</span></span><br><span class="line">            <span class="keyword">if</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.val == cur.next.val) &#123;</span><br><span class="line">                <span class="comment">// skip all duplicates</span></span><br><span class="line">                <span class="keyword">while</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.val == cur.next.val) &#123;</span><br><span class="line">                    cur = cur.next;</span><br><span class="line">                &#125;</span><br><span class="line">                last.next = cur.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// two are not the same</span></span><br><span class="line">                last = last.next; </span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// must have</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="subsets-ii"><a class="markdownIt-Anchor" href="#subsets-ii"></a> subsets ii</h2><p><a href="https://leetcode.com/problems/subsets-ii/submissions/">https://leetcode.com/problems/subsets-ii/submissions/</a></p><h3 id="solutions-27"><a class="markdownIt-Anchor" href="#solutions-27"></a> Solutions</h3><ul><li>skip the dps level for the same elements. so for duplicated levels, add different number of elements there</li><li>trick: set count to 1, and loop at least 0 and 1. if ther’s more, loop extra.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);    </span><br><span class="line">        dps(nums, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dps</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> idx, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (idx == m) &#123;</span><br><span class="line">            res.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx+count &lt; m &amp;&amp; nums[idx] == nums[idx + count]) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= count; i++) &#123;</span><br><span class="line">            dps(nums, idx + count, copy);</span><br><span class="line">            copy = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(copy);</span><br><span class="line">            copy.add(nums[idx]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reverse-linkedlist-ii"><a class="markdownIt-Anchor" href="#reverse-linkedlist-ii"></a> Reverse LinkedList II</h2><p><a href="https://leetcode.com/problems/reverse-linked-list-ii/">https://leetcode.com/problems/reverse-linked-list-ii/</a></p><p>trick part, remember the element before the reversal, and also the element where the reversal stops.</p><h3 id="solutions-28"><a class="markdownIt-Anchor" href="#solutions-28"></a> Solutions</h3><ul><li>use dummy head, because we don’t know the new head ahead of time</li><li>record “newHead” and “newTail” and “before”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseBetween</span><span class="params">(ListNode head, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">      <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">      <span class="type">ListNode</span> <span class="variable">before</span> <span class="operator">=</span> head;</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head; </span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (count == left - <span class="number">1</span>) &#123;</span><br><span class="line">               before = cur; </span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == left) &#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> head; </span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">newTail</span> <span class="operator">=</span> head; </span><br><span class="line">               <span class="type">ListNode</span> <span class="variable">reverseHead</span> <span class="operator">=</span> cur; </span><br><span class="line">               newTail = cur;</span><br><span class="line">               <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line">               <span class="keyword">while</span> (count &lt;= right) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (count == right) &#123;</span><br><span class="line">                     newHead = reverseHead;       </span><br><span class="line">                   &#125;</span><br><span class="line">                  <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> reverseHead.next; </span><br><span class="line">                   reverseHead.next = prev;</span><br><span class="line">                   prev = reverseHead;</span><br><span class="line">                  count++; </span><br><span class="line">                  reverseHead = next;</span><br><span class="line">               &#125;</span><br><span class="line">               newTail.next = reverseHead;</span><br><span class="line">               <span class="keyword">if</span> (left == <span class="number">1</span>) &#123;</span><br><span class="line">                  dummy.next = newHead; </span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  before.next = newHead; </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> dummy.next;</span><br><span class="line">           &#125; </span><br><span class="line">            </span><br><span class="line">           cur = cur.next;</span><br><span class="line">           count++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="restore-ip-address"><a class="markdownIt-Anchor" href="#restore-ip-address"></a> Restore IP Address</h2><p><a href="https://leetcode.com/problems/restore-ip-addresses/">https://leetcode.com/problems/restore-ip-addresses/</a></p><h3 id="solutions-29"><a class="markdownIt-Anchor" href="#solutions-29"></a> Solutions</h3><ul><li>backtrack (my prefered dps way)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       <span class="type">char</span>[] chars = s.toCharArray(); </span><br><span class="line">        dps(chars, <span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dps</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> idx, <span class="type">int</span> count, String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> chars.length;</span><br><span class="line">       <span class="keyword">if</span> (count == <span class="number">4</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (idx &gt;= m) <span class="keyword">return</span>;</span><br><span class="line">           <span class="type">int</span> <span class="variable">lastNumber</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">if</span> (Character.getNumericValue(chars[idx]) == <span class="number">0</span> &amp;&amp; idx != m-<span class="number">1</span>) <span class="keyword">return</span>; </span><br><span class="line">            <span class="keyword">while</span> (idx &lt; m) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> Character.getNumericValue(chars[idx]);</span><br><span class="line">                lastNumber = lastNumber * <span class="number">10</span> + tempNum; </span><br><span class="line">                idx++;</span><br><span class="line">                <span class="keyword">if</span>(lastNumber &gt; <span class="number">255</span>) <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           res.add(s + lastNumber); </span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125; </span><br><span class="line">        <span class="keyword">if</span> (idx == m) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//if (!Character.isDigit(chars[idx])) return;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Character.getNumericValue(chars[idx]);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">           dps(chars, ++idx, count+<span class="number">1</span>, s  + num + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; m &amp;&amp; num &lt;= <span class="number">255</span>) &#123;</span><br><span class="line">           dps(chars, ++idx, count+<span class="number">1</span>, s  + num + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx &gt;=m) <span class="keyword">return</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempNum</span> <span class="operator">=</span> Character.getNumericValue(chars[idx]);</span><br><span class="line">            num = num * <span class="number">10</span> + tempNum; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flip-string-to-monotone-increasing"><a class="markdownIt-Anchor" href="#flip-string-to-monotone-increasing"></a> Flip String to Monotone increasing</h2><p><a href="https://leetcode.com/problems/flip-string-to-monotone-increasing/">https://leetcode.com/problems/flip-string-to-monotone-increasing/</a></p><h2 id="solutions-30"><a class="markdownIt-Anchor" href="#solutions-30"></a> Solutions</h2><ul><li>s1. check how many 0s before element and how many zeros after element i using prefix sum</li><li>s2. very tricky thought process, dp thought process too<ul><li>if current element is 1<ul><li>not flip it, stays 1, so flips[i] = flips[i - 1]</li><li>flip it to 0, flips = flips[i] = previous ones + 1</li><li>get min</li></ul></li><li>if current element is 0<ul><li>not flipping it, stay 0, flips[i] = flips[i - 1]</li><li>flip it to 1, then flips[i] = flips[i - 1] + 1, because previous doesnt’ need to change.</li><li>get min</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minFlipsMonoIncr</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">one</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flip</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                one++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flip++;</span><br><span class="line">            &#125;</span><br><span class="line">            flip = Math.min(one,flip);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="count-unique-characters-of-all-substrings-of-a-given-string"><a class="markdownIt-Anchor" href="#count-unique-characters-of-all-substrings-of-a-given-string"></a> Count Unique Characters of All Substrings of a Given String</h2><p><a href="https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/">https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/</a></p><h3 id="solutions-31"><a class="markdownIt-Anchor" href="#solutions-31"></a> Solutions</h3><ul><li>S1. count contributions between last two same character: <a href="https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/discuss/128952/C%2B%2BJavaPython-One-pass-O(N)">https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/discuss/128952/C%2B%2BJavaPython-One-pass-O(N)</a></li><li>S2. remember lastIndex and contribution of each character: <a href="https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/discuss/129021/O(N)-Java-Solution-DP-Clear-and-easy-to-Understand">https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/discuss/129021/O(N)-Java-Solution-DP-Clear-and-easy-to-Understand</a></li></ul><h2 id="sum-of-subarray-ranges"><a class="markdownIt-Anchor" href="#sum-of-subarray-ranges"></a> Sum of Subarray Ranges</h2><p><a href="https://leetcode.com/problems/sum-of-subarray-ranges/">https://leetcode.com/problems/sum-of-subarray-ranges/</a></p><h3 id="solutions-32"><a class="markdownIt-Anchor" href="#solutions-32"></a> Solutions</h3><ul><li>S1. O(n^2), for for loop</li><li>S2. O(n) (to be reviewed) <a href="https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1624222/JavaC%2B%2BPython-O(n)-solution-detailed-explanation">https://leetcode.com/problems/sum-of-subarray-ranges/discuss/1624222/JavaC%2B%2BPython-O(n)-solution-detailed-explanation</a></li></ul><p>#04/10/2022</p><h2 id="lru-cache"><a class="markdownIt-Anchor" href="#lru-cache"></a> LRU Cache</h2><p><a href="https://leetcode.com/problems/lru-cache/">https://leetcode.com/problems/lru-cache/</a></p><h3 id="solutions-33"><a class="markdownIt-Anchor" href="#solutions-33"></a> Solutions</h3><ul><li>Node has “prev” and “next” pointer so the removal is easier</li><li>Have two dummy node “head” and “tail”, change everything in between so that we don’t have check if it’s the head or tail</li><li>separate methods to smaller ones<ul><li>popHead</li><li>appendToEnd</li><li>removeNode</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">0</span>, val = <span class="number">0</span>; </span><br><span class="line">        Node next, prev;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span> <span class="params">(<span class="type">int</span> key, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span> <span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    HashMap&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Node head, tail;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">       <span class="built_in">this</span>.map =  <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(!map.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        moveNodeToEnd(node);</span><br><span class="line">        <span class="keyword">return</span> node.val;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            node.val = value;</span><br><span class="line">            moveNodeToEnd(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">if</span> (map.size() == capacity) removeHead(); </span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">        map.put(key, node);</span><br><span class="line">       appendNode(node); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveNodeToEnd</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        appendNode(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeHead</span><span class="params">()</span> &#123;</span><br><span class="line">        head = head.next; </span><br><span class="line">        head.prev = <span class="literal">null</span>;</span><br><span class="line">        map.remove(head.key);</span><br><span class="line">        head.key = <span class="number">0</span>;</span><br><span class="line">        head.val = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">appendNode</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        </span><br><span class="line">        prev.next = node;</span><br><span class="line">        node.prev = prev;</span><br><span class="line">        </span><br><span class="line">        tail.prev = node;</span><br><span class="line">        node.next = tail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> node.prev;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> node.next;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        </span><br><span class="line">        node.next = <span class="literal">null</span>;</span><br><span class="line">        node.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="count-binary-substrings"><a class="markdownIt-Anchor" href="#count-binary-substrings"></a> Count Binary Substrings</h2><p><a href="https://leetcode.com/problems/count-binary-substrings/">https://leetcode.com/problems/count-binary-substrings/</a></p><h3 id="solutions-34"><a class="markdownIt-Anchor" href="#solutions-34"></a> Solutions</h3><ul><li>count ones and zeros, take min of the two consecutive groups</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countBinarySubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(i - <span class="number">1</span>)) &#123;</span><br><span class="line">                cur++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += Math.min(prev, cur);</span><br><span class="line">                prev = cur;</span><br><span class="line">                cur = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res + Math.min(prev, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="the-kth-factor-of-n"><a class="markdownIt-Anchor" href="#the-kth-factor-of-n"></a> The kth Factor of n</h2><p><a href="https://leetcode.com/problems/the-kth-factor-of-n/">https://leetcode.com/problems/the-kth-factor-of-n/</a></p><h3 id="solutions-35"><a class="markdownIt-Anchor" href="#solutions-35"></a> Solutions</h3><ul><li>O(sqrt(N))</li><li>S1. remember both halves.</li><li>S2. check if the k is in the first half, only save divisors</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthFactor</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        List&lt;Integer&gt; secondHalf = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> n % i; </span><br><span class="line">            <span class="keyword">if</span> (mod == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> i;    </span><br><span class="line">                &#125;</span><br><span class="line">                j = n / i;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                  secondHalf.add(j);  </span><br><span class="line">                &#125; </span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> secondHalf.size();</span><br><span class="line">        <span class="keyword">if</span> (k &gt; size) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> secondHalf.get(size - k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthFactor</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        List&lt;Integer&gt; firstHalf = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        List&lt;Integer&gt; secondHalf = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> n % i; </span><br><span class="line">            <span class="keyword">if</span> (mod == <span class="number">0</span>) &#123;</span><br><span class="line">               firstHalf.add(i); </span><br><span class="line">                j = n / i;</span><br><span class="line">                <span class="keyword">if</span> (i != j) &#123;</span><br><span class="line">                    secondHalf.add(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size1</span> <span class="operator">=</span> firstHalf.size();</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= size1) <span class="keyword">return</span> firstHalf.get(k - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size2</span> <span class="operator">=</span> secondHalf.size();</span><br><span class="line">        <span class="keyword">if</span> (k &gt; size1 + size2) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> secondHalf.get(size2 - (k - size1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="valid-palindrome-ii"><a class="markdownIt-Anchor" href="#valid-palindrome-ii"></a> valid palindrome II</h2><p><a href="https://leetcode.com/problems/valid-palindrome-ii/">https://leetcode.com/problems/valid-palindrome-ii/</a></p><h3 id="solutions-36"><a class="markdownIt-Anchor" href="#solutions-36"></a> Solutions</h3><ul><li>try both substrings generated by deleting each of the mismatched pair</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">           <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">              <span class="keyword">return</span> checkPalindrom(s, i, j-<span class="number">1</span>) || checkPalindrom(s, i+<span class="number">1</span>, j);</span><br><span class="line">           &#125; </span><br><span class="line">           i++; </span><br><span class="line">           j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkPalindrom</span><span class="params">(String s, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maximum-units-on-a-truck"><a class="markdownIt-Anchor" href="#maximum-units-on-a-truck"></a> Maximum Units on a Truck</h2><p><a href="https://leetcode.com/problems/maximum-units-on-a-truck/">https://leetcode.com/problems/maximum-units-on-a-truck/</a></p><h3 id="solutions-37"><a class="markdownIt-Anchor" href="#solutions-37"></a> Solutions</h3><ul><li>sort the array and pick from the bigger box first.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumUnits</span><span class="params">(<span class="type">int</span>[][] boxTypes, <span class="type">int</span> truckSize)</span> &#123;</span><br><span class="line">        <span class="comment">// sort boxTypes based on num of units per box</span></span><br><span class="line">        Arrays.sort(boxTypes, (<span class="type">int</span>[] a, <span class="type">int</span>[] b) -&gt; b[<span class="number">1</span>] - a[<span class="number">1</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">remaining</span> <span class="operator">=</span> truckSize;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; boxTypes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) <span class="keyword">return</span> total;</span><br><span class="line">            total += Math.min(remaining, boxTypes[i][<span class="number">0</span>]) * boxTypes[i][<span class="number">1</span>]; </span><br><span class="line">            remaining -= boxTypes[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="find-winner-on-a-tic-tac-toe-game"><a class="markdownIt-Anchor" href="#find-winner-on-a-tic-tac-toe-game"></a> Find Winner on a Tic Tac Toe Game</h2><p><a href="https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/">https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tictactoe</span><span class="params">(<span class="type">int</span>[][] moves)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][]  board = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moves.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// first player</span></span><br><span class="line">           <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)  &#123;</span><br><span class="line">              num = -<span class="number">1</span>; </span><br><span class="line">           &#125; </span><br><span class="line">            board[moves[i][<span class="number">0</span>]][moves[i][<span class="number">1</span>]] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check rows</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> board[i][<span class="number">0</span>]; </span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">win</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (board[i][j] != num) &#123;</span><br><span class="line">                   win = <span class="literal">false</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (win) &#123;</span><br><span class="line">                <span class="type">return</span> <span class="variable">num</span> <span class="operator">=</span>= -<span class="number">1</span> ? <span class="string">&quot;A&quot;</span> : <span class="string">&quot;B&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check cols</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> board[<span class="number">0</span>][i]; </span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">win</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (board[j][i] != num) &#123;</span><br><span class="line">                   win = <span class="literal">false</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (win) &#123;</span><br><span class="line">                <span class="type">return</span> <span class="variable">num</span> <span class="operator">=</span>= -<span class="number">1</span> ? <span class="string">&quot;A&quot;</span> : <span class="string">&quot;B&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check diagonal</span></span><br><span class="line">        <span class="keyword">if</span> (board[<span class="number">1</span>][<span class="number">1</span>] != <span class="number">0</span> &amp;&amp;((board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">2</span>]) || (board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">0</span>]))) &#123;</span><br><span class="line">            <span class="keyword">return</span> board[<span class="number">1</span>][<span class="number">1</span>] == -<span class="number">1</span> ? <span class="string">&quot;A&quot;</span> : <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (moves.length &lt; <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Pending&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Draw&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tictactoe</span><span class="params">(<span class="type">int</span>[][] moves)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// n stands for the size of the board, n = 3 for the current game.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use rows and cols to record the value on each row and each column.</span></span><br><span class="line">        <span class="comment">// diag1 and diag2 to record value on diagonal or anti-diagonal.</span></span><br><span class="line">        <span class="type">int</span>[] rows = <span class="keyword">new</span> <span class="title class_">int</span>[n], cols = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">diag</span> <span class="operator">=</span> <span class="number">0</span>, anti_diag = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Two players having value of 1 and -1, player_1 with value = 1 places first.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">player</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] move : moves)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get the row number and column number for this move.</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> move[<span class="number">0</span>], col = move[<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Update the row value and column value.</span></span><br><span class="line">            rows[row] += player;</span><br><span class="line">            cols[col] += player;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// If this move is placed on diagonal or anti-diagonal, </span></span><br><span class="line">            <span class="comment">// we shall update the relative value as well.</span></span><br><span class="line">            <span class="keyword">if</span> (row == col)&#123;</span><br><span class="line">                diag += player;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (row + col == n - <span class="number">1</span>)&#123;</span><br><span class="line">                anti_diag += player;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Check if this move meets any of the winning conditions.</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(rows[row]) == n || Math.abs(cols[col]) == n || </span><br><span class="line">                Math.abs(diag) == n || Math.abs(anti_diag) == n)&#123;</span><br><span class="line">                <span class="type">return</span> <span class="variable">player</span> <span class="operator">=</span>= <span class="number">1</span> ? <span class="string">&quot;A&quot;</span> : <span class="string">&quot;B&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// If no one wins so far, change to the other player alternatively. </span></span><br><span class="line">            <span class="comment">// That is from 1 to -1, from -1 to 1.</span></span><br><span class="line">            player *= -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If all moves are completed and there is still no result, we shall check if </span></span><br><span class="line">        <span class="comment">// the grid is full or not. If so, the game ends with draw, otherwise pending.</span></span><br><span class="line">        <span class="keyword">return</span> moves.length == n * n ? <span class="string">&quot;Draw&quot;</span> : <span class="string">&quot;Pending&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sum-of-subarray-minimums"><a class="markdownIt-Anchor" href="#sum-of-subarray-minimums"></a> Sum of Subarray Minimums</h2><p><a href="https://leetcode.com/problems/sum-of-subarray-minimums/">https://leetcode.com/problems/sum-of-subarray-minimums/</a></p><h3 id="solutions-38"><a class="markdownIt-Anchor" href="#solutions-38"></a> Solutions</h3><ul><li>count the contributions of each element being the smallest element</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumSubarrayMins</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        s.add(<span class="number">0</span>); </span><br><span class="line">        <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> (<span class="type">int</span>)(Math.pow(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= l; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!s.isEmpty() &amp;&amp; arr[s.peek()] &gt; (i == l? <span class="number">0</span> : arr[i])) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> s.pop(); </span><br><span class="line">                <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> s.isEmpty() ? -<span class="number">1</span> :s.peek();</span><br><span class="line">                res += (<span class="type">long</span>)arr[j] * (j - k) * (i - j);</span><br><span class="line">                res = res % mod;</span><br><span class="line">            &#125; </span><br><span class="line">            s.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="minimum-swaps-to-group-all-1s-together"><a class="markdownIt-Anchor" href="#minimum-swaps-to-group-all-1s-together"></a> Minimum Swaps to Group All 1’s Together</h2><p><a href="https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/">https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together/</a></p><h3 id="solutions-39"><a class="markdownIt-Anchor" href="#solutions-39"></a> Solutions</h3><ul><li>sliding window O(n) time, O(1) space</li><li>prefix sum: O(n) time, O(n) space</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSwaps</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ones</span> <span class="operator">=</span> Arrays.stream(data).sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt_one</span> <span class="operator">=</span> <span class="number">0</span>, max_one = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (right &lt; data.length) &#123;</span><br><span class="line">            <span class="comment">// updating the number of 1&#x27;s by adding the new element</span></span><br><span class="line">            cnt_one += data[right++];</span><br><span class="line">            <span class="comment">// maintain the length of the window to ones</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &gt; ones) &#123;</span><br><span class="line">                <span class="comment">// updating the number of 1&#x27;s by removing the oldest element</span></span><br><span class="line">                cnt_one -= data[left++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// record the maximum number of 1&#x27;s in the window</span></span><br><span class="line">            max_one = Math.max(max_one, cnt_one);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ones - max_one;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>My attempt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSwaps</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> data.length;</span><br><span class="line">        <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[l]; </span><br><span class="line">        sum[<span class="number">0</span>] = data[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; l; i++) &#123;</span><br><span class="line">            sum[i] = data[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum[l - <span class="number">1</span>] &lt; <span class="number">2</span> || sum[l - <span class="number">1</span>] == l) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= l - sum[l - <span class="number">1</span>]; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> i + sum[l-<span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">localMin</span> <span class="operator">=</span> sum[l - <span class="number">1</span>] - sum[lastIndex] + sum[i];</span><br><span class="line">            <span class="keyword">if</span> (data[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                localMin--;</span><br><span class="line">            &#125; </span><br><span class="line">            min = Math.min(localMin, min);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="maximum-length-of-subarray-with-positive-product"><a class="markdownIt-Anchor" href="#maximum-length-of-subarray-with-positive-product"></a> Maximum Length of Subarray With Positive Product</h2><p><a href="https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/">https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/</a></p><h3 id="solutions-40"><a class="markdownIt-Anchor" href="#solutions-40"></a> Solutions</h3><ul><li>record the first negative number’s index(my solution)</li><li>dry run</li></ul><figure class="highlight java"><figcaption><span>My solution</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxLen</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">negatives</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">firstNegative</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                negatives = <span class="number">0</span>;</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">                firstNegative = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (firstNegative == -<span class="number">1</span>) &#123;</span><br><span class="line">                    firstNegative = i;</span><br><span class="line">                &#125;</span><br><span class="line">                negatives++;</span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">if</span> (negatives % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; firstNegative != -<span class="number">1</span>) &#123; <span class="comment">// but there&#x27;s odd number of negatives, count between first negative and current</span></span><br><span class="line">               max = Math.max(max, i - firstNegative); </span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (negatives % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               max = Math.max(max, count + <span class="number">1</span>); </span><br><span class="line">           &#125;</span><br><span class="line">            count++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>dry run</span><a href="https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/discuss/820072/EASY-soultion-with-DRY-RUN-JAVA">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxLen</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">positive</span> <span class="operator">=</span> <span class="number">0</span>, negative = <span class="number">0</span>;    <span class="comment">// length of positive and negative results</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)  &#123;</span><br><span class="line">                positive = <span class="number">0</span>;</span><br><span class="line">                negative = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                positive++;</span><br><span class="line">                negative = negative == <span class="number">0</span> ? <span class="number">0</span>  : negative+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> positive;</span><br><span class="line">                positive = negative == <span class="number">0</span> ? <span class="number">0</span>  : negative+<span class="number">1</span>;</span><br><span class="line">                negative = temp+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, positive);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nested-list-weight-sum"><a class="markdownIt-Anchor" href="#nested-list-weight-sum"></a> Nested List Weight Sum</h2><p><a href="https://leetcode.com/problems/nested-list-weight-sum/">https://leetcode.com/problems/nested-list-weight-sum/</a></p><h3 id="solutions-41"><a class="markdownIt-Anchor" href="#solutions-41"></a> solutions</h3><ul><li>DFS</li><li>BFS</li></ul><figure class="highlight java"><figcaption><span>Coding tricks</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;NestedInteger&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;NestedInteger&gt;(nestedList);</span><br><span class="line">queue.addAll(ni.getList());</span><br></pre></td></tr></table></figure><h2 id="lowest-common-ancestor-with-parent-pointer"><a class="markdownIt-Anchor" href="#lowest-common-ancestor-with-parent-pointer"></a> Lowest Common Ancestor with parent pointer</h2><p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/">https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/</a></p><h3 id="solutions-42"><a class="markdownIt-Anchor" href="#solutions-42"></a> Solutions</h3><ul><li>S1. Set</li><li>S2. traverse both paths</li></ul><figure class="highlight java"><figcaption><span>Set Solution</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">lowestCommonAncestor</span><span class="params">(Node p, Node q)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            set.add(p.val);</span><br><span class="line">            p = p.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(q.val)) <span class="keyword">return</span> q;</span><br><span class="line">            q = q.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>travers both paths solution</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">lowestCommonAncestor</span><span class="params">(Node p, Node q)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">n1</span> <span class="operator">=</span> p;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">n2</span> <span class="operator">=</span> q;</span><br><span class="line">        <span class="keyword">while</span> (n1 != n2) &#123;</span><br><span class="line">            n1 = n1.parent == <span class="literal">null</span> ? q : n1.parent;</span><br><span class="line">            n2 = n2.parent == <span class="literal">null</span> ? p : n2.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="smallest-common-region"><a class="markdownIt-Anchor" href="#smallest-common-region"></a> Smallest Common Region</h2><p><a href="https://leetcode.com/problems/smallest-common-region/">https://leetcode.com/problems/smallest-common-region/</a></p><h3 id="solutions-43"><a class="markdownIt-Anchor" href="#solutions-43"></a> Solutions</h3><ul><li>use a tree structure to record the parent of each node(my method)</li><li>use a hashMap to record the parent</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">//List&lt;Node&gt; children = new ArrayList&lt;Node&gt;();</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(String val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findSmallestRegion</span><span class="params">(List&lt;List&lt;String&gt;&gt; regions, String region1, String region2)</span> &#123;</span><br><span class="line">        <span class="comment">// thoughts: create a tree struction and a set of all tree nodes, then find the lowest common ancestor. </span></span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// create a tree auto of the regions. </span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; region: regions) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">parentNode</span> <span class="operator">=</span> map.getOrDefault(region.get(<span class="number">0</span>), <span class="keyword">new</span> <span class="title class_">Node</span>(region.get(<span class="number">0</span>))); </span><br><span class="line">            map.put(region.get(<span class="number">0</span>), parentNode);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; region.size(); i++) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">child</span> <span class="operator">=</span> map.getOrDefault(region.get(i), <span class="keyword">new</span> <span class="title class_">Node</span>(region.get(i)));</span><br><span class="line">                map.put(region.get(i), child);</span><br><span class="line">                <span class="comment">//parentNode.children.add(child);</span></span><br><span class="line">                child.parent = parentNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find the lowest common ancestor </span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n1</span> <span class="operator">=</span> map.get(region1);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">n2</span> <span class="operator">=</span> map.get(region2);</span><br><span class="line">        HashSet&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">while</span> (n1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            paths.add(n1.val);</span><br><span class="line">            n1 = n1.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paths.contains(n2.val)) <span class="keyword">return</span> n2.val; </span><br><span class="line">            n2 = n2.parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findSmallestRegion</span><span class="params">(List&lt;List&lt;String&gt;&gt; regions, String region1, String region2)</span> &#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; region: regions) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; region.size(); i++) &#123;</span><br><span class="line">                map.put(region.get(i), region.get(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// find the lowest common ancestor </span></span><br><span class="line">        HashSet&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">while</span> (region1 != <span class="literal">null</span>) &#123;</span><br><span class="line">            paths.add(region1);</span><br><span class="line">            region1 = map.get(region1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (region2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paths.contains(region2)) <span class="keyword">return</span> region2; </span><br><span class="line">            region2 = map.get(region2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>without set</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; parent = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(List&lt;String&gt; rs: regions) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; rs.size(); j++) &#123;</span><br><span class="line">        parent.put(rs.get(j), rs.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">p1</span> <span class="operator">=</span> region1, p2 = region2;</span><br><span class="line"><span class="keyword">while</span>(!p1.equals(p2)) &#123;</span><br><span class="line">    p1 = parent.getOrDefault(p1, region2);</span><br><span class="line">    p2 = parent.getOrDefault(p2, region1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br></pre></td></tr></table></figure><h2 id="cinema-seat-allocation"><a class="markdownIt-Anchor" href="#cinema-seat-allocation"></a> Cinema seat allocation</h2><p><a href="https://leetcode.com/problems/cinema-seat-allocation/submissions/">https://leetcode.com/problems/cinema-seat-allocation/submissions/</a></p><h3 id="solutions-44"><a class="markdownIt-Anchor" href="#solutions-44"></a> Solutions</h3><ul><li>only iterate reserved rows</li><li>S1. use a boolean array for each row</li><li>S2. use a set for each row</li><li>S2. use an integer for the row, use bitwise operations</li></ul><figure class="highlight javascript"><figcaption><span>1.5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    public int <span class="title function_">maxNumberOfFamilies</span>(<span class="params">int n, int[][] reservedSeats</span>) &#123;</span><br><span class="line">        <span class="title class_">HashMap</span>&lt;<span class="title class_">Integer</span>, boolean[]&gt; reservedRows = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (int[] <span class="attr">seat</span>: reservedSeats) &#123;</span><br><span class="line">            boolean[] cols = reservedRows.<span class="title function_">getOrDefault</span>(seat[<span class="number">0</span>] - <span class="number">1</span>, <span class="keyword">new</span> boolean[<span class="number">10</span>]);</span><br><span class="line">            cols[seat[<span class="number">1</span>] - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            reservedRows.<span class="title function_">put</span>(seat[<span class="number">0</span>] - <span class="number">1</span>, cols);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(reservedRows.size());</span></span><br><span class="line">        int result = <span class="number">2</span> * (n - reservedRows.<span class="title function_">size</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (boolean[] cols : reservedRows.<span class="title function_">values</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cols[<span class="number">1</span>] &amp;&amp; !cols[<span class="number">2</span>] &amp;&amp; !cols[<span class="number">3</span>] &amp;&amp; !cols[<span class="number">4</span>]) &#123;</span><br><span class="line">                cols[<span class="number">3</span>] = <span class="literal">true</span>;</span><br><span class="line">                cols[<span class="number">4</span>] = <span class="literal">true</span>;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!cols[<span class="number">3</span>] &amp;&amp; !cols[<span class="number">4</span>] &amp;&amp; !cols[<span class="number">5</span>] &amp;&amp; !cols[<span class="number">6</span>]) &#123;</span><br><span class="line">                cols[<span class="number">5</span>] = <span class="literal">true</span>;</span><br><span class="line">                cols[<span class="number">6</span>] = <span class="literal">true</span>;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!cols[<span class="number">5</span>] &amp;&amp; !cols[<span class="number">6</span>] &amp;&amp; !cols[<span class="number">7</span>] &amp;&amp; !cols[<span class="number">8</span>]) &#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>S2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxNumberOfFamilies</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] reservedSeats)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, HashSet&lt;Integer&gt;&gt; reservedRows = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] seat: reservedSeats) &#123;</span><br><span class="line">            HashSet&lt;Integer&gt; cols = reservedRows.getOrDefault(seat[<span class="number">0</span>] - <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;());</span><br><span class="line">            cols.add(seat[<span class="number">1</span>] - <span class="number">1</span>);</span><br><span class="line">            reservedRows.put(seat[<span class="number">0</span>] - <span class="number">1</span>, cols);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(reservedRows.size());</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">2</span> * (n - reservedRows.size());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (HashSet&lt;Integer&gt; cols : reservedRows.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cols.contains(<span class="number">1</span>) &amp;&amp; !cols.contains(<span class="number">2</span>) &amp;&amp; !cols.contains(<span class="number">3</span>) &amp;&amp; !cols.contains(<span class="number">4</span>)) &#123;</span><br><span class="line">                cols.add(<span class="number">3</span>);</span><br><span class="line">                cols.add(<span class="number">4</span>);</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!cols.contains(<span class="number">3</span>) &amp;&amp; !cols.contains(<span class="number">4</span>) &amp;&amp; !cols.contains(<span class="number">5</span>) &amp;&amp; !cols.contains(<span class="number">6</span>)) &#123;</span><br><span class="line">                cols.add(<span class="number">5</span>);</span><br><span class="line">                cols.add(<span class="number">6</span>);</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!cols.contains(<span class="number">5</span>) &amp;&amp; !cols.contains(<span class="number">6</span>) &amp;&amp; !cols.contains(<span class="number">7</span>) &amp;&amp; !cols.contains(<span class="number">8</span>)) &#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>S3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxNumberOfFamilies</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] reservedSeats)</span> &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; reservedRows = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] seat: reservedSeats) &#123;</span><br><span class="line">            reservedRows.put(seat[<span class="number">0</span>], reservedRows.getOrDefault(seat[<span class="number">0</span>], <span class="number">0</span>) | (<span class="number">1</span> &lt;&lt; seat[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">2</span> * (n - reservedRows.size());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> cols : reservedRows.values()) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">reserved</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> ((cols &amp; <span class="number">60</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                reserved = <span class="literal">true</span>;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((cols &amp; <span class="number">960</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                reserved = <span class="literal">true</span>;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!reserved &amp;&amp; (cols &amp; <span class="number">240</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="distribute-coins-in-binary-tree"><a class="markdownIt-Anchor" href="#distribute-coins-in-binary-tree"></a> Distribute Coins in Binary Tree</h2><p><a href="https://leetcode.com/problems/distribute-coins-in-binary-tree/">https://leetcode.com/problems/distribute-coins-in-binary-tree/</a></p><h2 id="solutions-45"><a class="markdownIt-Anchor" href="#solutions-45"></a> Solutions</h2><ul><li>divide and conquer, only look at two layers (parent, left, right)</li><li>return excess number of coins up each level, as it levels, it increase the total answer</li><li>record answer on each level.</li><li>overall way of thinking, bottom up solution, move excess number as soon as we find it.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> ans;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">distributeCoins</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">      dfs(root);  </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> dfs(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> dfs(root.right);</span><br><span class="line">        ans += Math.abs(l) + Math.abs(r);</span><br><span class="line">        <span class="keyword">return</span> root.val + l + r  - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="roblox"><a class="markdownIt-Anchor" href="#roblox"></a> Roblox</h1><h2 id="design-browser-history"><a class="markdownIt-Anchor" href="#design-browser-history"></a> Design Browser History</h2><p><a href="https://leetcode.com/problems/design-browser-history/">https://leetcode.com/problems/design-browser-history/</a></p><h3 id="solutions-46"><a class="markdownIt-Anchor" href="#solutions-46"></a> Solutions</h3><ul><li>two stacks<ul><li>trick, while loop two conditions (steps &gt; 0 &amp;&amp; back.size() &gt; 1)</li></ul></li><li>doubly linked list (trickier to write)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BrowserHistory</span> &#123;</span><br><span class="line">    Stack&lt;String&gt; back;</span><br><span class="line">    Stack&lt;String&gt; forward;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BrowserHistory</span><span class="params">(String homepage)</span> &#123;</span><br><span class="line">       back = <span class="keyword">new</span> <span class="title class_">Stack</span>(); </span><br><span class="line">       forward = <span class="keyword">new</span> <span class="title class_">Stack</span>(); </span><br><span class="line">        back.add(homepage);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(String url)</span> &#123;</span><br><span class="line">       forward.clear(); </span><br><span class="line">        back.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">back</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">page</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; </span><br><span class="line">        <span class="keyword">while</span> (steps &gt; <span class="number">0</span> &amp;&amp; back.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            page = back.pop();</span><br><span class="line">            forward.add(page); </span><br><span class="line">            steps--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> back.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">forward</span><span class="params">(<span class="type">int</span> steps)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">page</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span>(steps &gt; <span class="number">0</span> &amp;&amp; !forward.isEmpty()) &#123;</span><br><span class="line">            page = forward.pop();</span><br><span class="line">            back.add(page);</span><br><span class="line">            steps--;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> back.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="text-justification"><a class="markdownIt-Anchor" href="#text-justification"></a> Text Justification</h2><p><a href="https://leetcode.com/problems/text-justification/">https://leetcode.com/problems/text-justification/</a></p><h3 id="solutions-47"><a class="markdownIt-Anchor" href="#solutions-47"></a> Solutions</h3><ul><li>Single Responsibility Principle (split into smaller functions)</li><li>It’s a special case when there’s only one word in the row</li><li>last row is different too, because it needs to split into two parts, one appending 1 space, one append all the rest of the spaces</li></ul><figure class="highlight java"><figcaption><span>my own solution</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fullJustify</span><span class="params">(String[] words, <span class="type">int</span> maxWidth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (words.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>, wordCharLength = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (right &lt; words.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">wordLength</span> <span class="operator">=</span> words[right].length();</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowLengthWithSpaces</span> <span class="operator">=</span> wordCharLength + (right - left) - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// if previous range plus current word exceeds max width, justify the previous range, and reset the range start</span></span><br><span class="line">            <span class="keyword">if</span> (rowLengthWithSpaces + <span class="number">1</span> + wordLength &gt; maxWidth) &#123;</span><br><span class="line">                res.add(justify(words, left, right - <span class="number">1</span>, wordCharLength, maxWidth - rowLengthWithSpaces + (right - left) - <span class="number">1</span>, maxWidth));</span><br><span class="line">                left = right;</span><br><span class="line">                wordCharLength = <span class="number">0</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            right = right + <span class="number">1</span>;</span><br><span class="line">            wordCharLength += wordLength;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// add last range to the solution</span></span><br><span class="line">        res.add(lastRowConverting(words, left, words.length - <span class="number">1</span>, maxWidth));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// converting last row includes two parts, </span></span><br><span class="line">    <span class="comment">// 1. everything before the last word should be concatinate with 1 space</span></span><br><span class="line">    <span class="comment">// 2. last word should be treated using a normal justify function with a shorter maxWidth</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">lastRowConverting</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> maxWidth)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">lastRow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// if there&#x27;s more than one word, </span></span><br><span class="line">        <span class="comment">// 1. append these words with a space to the answer, </span></span><br><span class="line">        <span class="comment">// 2. maxWidth decrease by the size of the word + space </span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            lastRow.append(words[left] + <span class="string">&quot; &quot;</span>);    </span><br><span class="line">            maxWidth -= (words[left].length() + <span class="number">1</span>);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lastWordLength</span> <span class="operator">=</span> words[right].length();</span><br><span class="line">        <span class="comment">// justify last word</span></span><br><span class="line">        lastRow.append(justify(words, left, right, lastWordLength, maxWidth - lastWordLength, maxWidth));</span><br><span class="line">        <span class="keyword">return</span> lastRow.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">justify</span><span class="params">(String[] words, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> charLength,  <span class="type">int</span> totalSpaces, <span class="type">int</span> maxWidth)</span> &#123;</span><br><span class="line">        <span class="comment">// space slots</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">slots</span> <span class="operator">=</span> right - left; </span><br><span class="line">        <span class="comment">// if there&#x27;s no slots, that means it&#x27;s one word, so each spacePerSlot should be totalSpace</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">spacePerSlot</span> <span class="operator">=</span> slots == <span class="number">0</span> ? totalSpaces : totalSpaces / slots;</span><br><span class="line">        <span class="comment">// only valid if there&#x27;s more than one slots</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">spaceDiff</span> <span class="operator">=</span> slots == <span class="number">0</span> ? <span class="number">0</span> : totalSpaces % slots;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            sb.append(words[left]); </span><br><span class="line">            <span class="comment">// if there&#x27;s more than one slot, don&#x27;t append space to the last word</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">spacesAfterThisWord</span> <span class="operator">=</span> (slots != <span class="number">0</span> &amp;&amp; left == right) ? <span class="number">0</span> : spacePerSlot + (spaceDiff &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>); </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; spacesAfterThisWord;j++) &#123;</span><br><span class="line">                sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            spaceDiff--;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="word-search-2"><a class="markdownIt-Anchor" href="#word-search-2"></a> Word Search</h2><p><a href="https://leetcode.com/problems/word-search/">https://leetcode.com/problems/word-search/</a></p><h3 id="solutions-48"><a class="markdownIt-Anchor" href="#solutions-48"></a> Solutions</h3><ul><li><strong>use existing board instead of extra space, mark visited cell “#”</strong></li><li>check if there’s char that’s not in the board</li><li>check if the word’s length is longer than total num of chars</li><li>check 4 directions at each cell.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span> (word.length() &gt; m * n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        HashSet&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] cs : board) </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : cs)</span><br><span class="line">                set.add(c); </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : word.toCharArray()) </span><br><span class="line">            <span class="keyword">if</span> (!set.contains(c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//actual traverse</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == word.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> dfs(board, word, <span class="number">0</span>, i, j);</span><br><span class="line">                    <span class="keyword">if</span> (res) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, String word, <span class="type">int</span> idx, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board[<span class="number">0</span>].length;</span><br><span class="line">       <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= m || j &lt; <span class="number">0</span> || j &gt;= n || board[i][j] != word.charAt(idx)) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">       <span class="keyword">if</span> (idx == word.length() - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        board[i][j] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">up</span> <span class="operator">=</span> dfs(board, word, idx + <span class="number">1</span>, i - <span class="number">1</span>, j);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span> dfs(board, word, idx + <span class="number">1</span>, i + <span class="number">1</span>, j);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> dfs(board, word, idx + <span class="number">1</span>, i, j - <span class="number">1</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> dfs(board, word, idx + <span class="number">1</span>, i, j + <span class="number">1</span>);</span><br><span class="line">        board[i][j] = word.charAt(idx);</span><br><span class="line">        <span class="keyword">return</span> up || down || left || right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4282022"><a class="markdownIt-Anchor" href="#4282022"></a> 4/28/2022</h1><h2 id="course-schedule-ii"><a class="markdownIt-Anchor" href="#course-schedule-ii"></a> Course Schedule II</h2><p><a href="https://leetcode.com/problems/course-schedule-ii/">https://leetcode.com/problems/course-schedule-ii/</a></p><h3 id="solutions-49"><a class="markdownIt-Anchor" href="#solutions-49"></a> solutions</h3><ul><li>Topological sort methods<ul><li>dfs with colors (permanent, temporary, and empty), add permanent node only. start with each empty node, and mark each one gray, top down, if a gray is met again, that means there’s a cycle.</li><li>indegree, indegree means how many parents/dependencies one node has, only add node whose indegree is 0, that means all the dependencies are process already. decrease each node’s indegrees by one when a different node unlocks this node</li></ul></li></ul><figure class="highlight java"><figcaption><span>indegrees</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findOrder(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) &#123;</span><br><span class="line">        <span class="type">int</span>[] indegrees = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Integer, List&lt;Integer&gt;&gt; unlocks = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] pre : prerequisites) &#123;</span><br><span class="line">            indegrees[pre[<span class="number">0</span>]]++;</span><br><span class="line">            List&lt;Integer&gt; unlock = unlocks.getOrDefault(pre[<span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">            unlock.add(pre[<span class="number">0</span>]);</span><br><span class="line">            unlocks.put(pre[<span class="number">1</span>], unlock);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indegrees[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// this is very smart, because all the ones that don&#x27;t have dependencies are added to the queue as well. </span></span><br><span class="line">                q.add(i);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//System.out.println(unlocks);</span></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> q.size(); </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                ans[k++] = cur; </span><br><span class="line">                <span class="keyword">if</span> (unlocks.containsKey(cur)) &#123;</span><br><span class="line">                    List&lt;Integer&gt; unlock = unlocks.get(cur);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> dependency : unlock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (--indegrees[dependency] == <span class="number">0</span>) &#123;</span><br><span class="line">                            q.add(dependency);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k == numCourses) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="number-of-matching-subsequences"><a class="markdownIt-Anchor" href="#number-of-matching-subsequences"></a> Number of Matching Subsequences</h2><p><a href="https://leetcode.com/problems/number-of-matching-subsequences/submissions/">https://leetcode.com/problems/number-of-matching-subsequences/submissions/</a></p><h3 id="solutions-50"><a class="markdownIt-Anchor" href="#solutions-50"></a> Solutions</h3><ul><li>binary search (my solution)<ul><li>record all indice for all chars in <code>s</code></li><li>for each word’s character, check if there exists an char that’s behind the previous char’s index</li></ul></li><li>go through each word in parallel (m being the length of <code>s</code>, n being the length of <code>words</code>)<ul><li>brute force O(mn), TLE</li><li>for each char in <code>s</code>, create a <code>HashMap</code> or <code>array[26]</code>, optimised, O(m + num of chars of all words) &lt; O(mn), because m * n - (m + n * l) = mn - m - nl = m(n-1) - nl ~= n(m-l), as long as m is bigger than l, this method is more efficient, which is true. otherwise, most of words longer than l can be eliminated by checking the length diff between l and m in O(1) for each word</li></ul></li></ul><figure class="highlight java"><figcaption><span>my binary solution (my solution)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numMatchingSubseq</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">        HashMap&lt;Character, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; l = map.getOrDefault(s.charAt(i), <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">            l.add(i);</span><br><span class="line">            map.put(s.charAt(i), l);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; word.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(word.charAt(i))) <span class="keyword">break</span>;</span><br><span class="line">                idx = findIndexToTheRightOf(idx, map.get(word.charAt(i))); </span><br><span class="line">                <span class="comment">//System.out.println(word.charAt(i) + &quot;: &quot; + idx);</span></span><br><span class="line">                <span class="keyword">if</span> (idx == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == word.length()) ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findIndexToTheRightOf</span><span class="params">(<span class="type">int</span> idx, List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">0</span> || list.get(list.size() - <span class="number">1</span>) &lt;= idx) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid) &lt;= idx) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(left) &gt; idx ? list.get(left) : list.get(right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>parallel with all indices (my solution)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numMatchingSubseq</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] indice = <span class="keyword">new</span> <span class="title class_">int</span>[words.length];</span><br><span class="line">        List&lt;Integer&gt;[] heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            heads[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; words.length; i++)</span><br><span class="line">            heads[words[i].charAt(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: s.toCharArray()) &#123;</span><br><span class="line">            List&lt;Integer&gt; l = heads[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            heads[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : l) &#123;</span><br><span class="line">                indice[i]++;</span><br><span class="line">                <span class="keyword">if</span> (indice[i] == words[i].length()) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (indice[i] &lt; words[i].length()) &#123;</span><br><span class="line">                    <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> words[i].charAt(indice[i]);</span><br><span class="line">                    heads[ch - <span class="string">&#x27;a&#x27;</span>].add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>parallel OOP (given solution)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numMatchingSubseq</span><span class="params">(String S, String[] words)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Node&gt;[] heads = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">            heads[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String word: words)</span><br><span class="line">            heads[word.charAt(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>].add(<span class="keyword">new</span> <span class="title class_">Node</span>(word, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c: S.toCharArray()) &#123;</span><br><span class="line">            ArrayList&lt;Node&gt; old_bucket = heads[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            heads[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Node node: old_bucket) &#123;</span><br><span class="line">                node.index++;</span><br><span class="line">                <span class="keyword">if</span> (node.index == node.word.length()) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    heads[node.word.charAt(node.index) - <span class="string">&#x27;a&#x27;</span>].add(node);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            old_bucket.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    String word;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(String w, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        word = w;</span><br><span class="line">        index = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;04052022&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#04052022&quot;&gt;&lt;/a&gt; 04/05/2022&lt;/h1&gt;
&lt;h2 id=&quot;longest-common-prefix&quot;&gt;&lt;a class=&quot;markdownIt-Anc</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="algorithms" scheme="https://deyikong.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Trie</title>
    <link href="https://deyikong.github.io/2022/04/03/Trie/"/>
    <id>https://deyikong.github.io/2022/04/03/Trie/</id>
    <published>2022-04-03T03:31:32.000Z</published>
    <updated>2023-02-14T07:37:15.113Z</updated>
    
    <content type="html"><![CDATA[<p>##Search Suggestion System: <a href="https://leetcode.com/problems/search-suggestions-system/">https://leetcode.com/problems/search-suggestions-system/</a></p><figure class="highlight java"><figcaption><span> </span><a href="https://leetcode.com/problems/search-suggestions-system/">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom class Trie with function to get 3 words starting with given prefix</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Node definition of a trie</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isWord</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        List&lt;Node&gt; children = Arrays.asList(<span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>]);</span><br><span class="line">    &#125;;</span><br><span class="line">    Node Root, curr;</span><br><span class="line">    List&lt;String&gt; resultBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Runs a DFS on trie starting with given prefix and adds all the words in the resultBuffer, limiting result size to 3</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfsWithPrefix</span><span class="params">(Node curr, String word)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultBuffer.size() == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (curr.isWord)</span><br><span class="line">            resultBuffer.add(word);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Run DFS on all possible paths.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; c++)</span><br><span class="line">            <span class="keyword">if</span> (curr.children.get(c - <span class="string">&#x27;a&#x27;</span>) != <span class="literal">null</span>)</span><br><span class="line">                dfsWithPrefix(curr.children.get(c - <span class="string">&#x27;a&#x27;</span>), word + c);</span><br><span class="line">    &#125;</span><br><span class="line">    Trie() &#123;</span><br><span class="line">        Root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Inserts the string in trie.</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Points curr to the root of trie.</span></span><br><span class="line">        curr = Root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.children.get(c - <span class="string">&#x27;a&#x27;</span>) == <span class="literal">null</span>)</span><br><span class="line">                curr.children.set(c - <span class="string">&#x27;a&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Node</span>());</span><br><span class="line">            curr = curr.children.get(c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Mark this node as a completed word.</span></span><br><span class="line">        curr.isWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; <span class="title function_">getWordsStartingWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        curr = Root;</span><br><span class="line">        resultBuffer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="comment">// Move curr to the end of prefix in its trie representation.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : prefix.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.children.get(c - <span class="string">&#x27;a&#x27;</span>) == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> resultBuffer;</span><br><span class="line">            curr = curr.children.get(c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dfsWithPrefix(curr, prefix);</span><br><span class="line">        <span class="keyword">return</span> resultBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; <span class="title function_">suggestedProducts</span><span class="params">(String[] products,</span></span><br><span class="line"><span class="params">                                         String searchWord)</span> &#123;</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">trie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// Add all words to trie.</span></span><br><span class="line">        <span class="keyword">for</span> (String w : products)</span><br><span class="line">            trie.insert(w);</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : searchWord.toCharArray()) &#123;</span><br><span class="line">            prefix += c;</span><br><span class="line">            result.add(trie.getWordsStartingWith(prefix));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##Search Suggestion System: &lt;a href=&quot;https://leetcode.com/problems/search-suggestions-system/&quot;&gt;https://leetcode.com/problems/search-sugge</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="algorithms" scheme="https://deyikong.github.io/tags/algorithms/"/>
    
    <category term="trie" scheme="https://deyikong.github.io/tags/trie/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search Tree</title>
    <link href="https://deyikong.github.io/2022/03/18/Binary-Search-Tree/"/>
    <id>https://deyikong.github.io/2022/03/18/Binary-Search-Tree/</id>
    <published>2022-03-18T06:48:05.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="binary-search-tree"><a class="markdownIt-Anchor" href="#binary-search-tree"></a> Binary Search Tree</h2><h3 id="keys"><a class="markdownIt-Anchor" href="#keys"></a> Keys</h3><ul><li>pre order traverse</li><li>in order traverse -&gt; sorted array</li><li>post order traverse</li></ul><h3 id="searching"><a class="markdownIt-Anchor" href="#searching"></a> Searching</h3><p>Recursive</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TREE-SEARCH(x, k)</span><br><span class="line">    if x == NIL or k == x.key</span><br><span class="line">        return x</span><br><span class="line">    if x &lt; x.key</span><br><span class="line">        return TREE-SEARCH(x.left, k)</span><br><span class="line">    else return TREE-SEARCH(x.right, k)</span><br></pre></td></tr></table></figure><p>Iterative</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITERATIVE-TREE-SEARCH(x, k)</span><br><span class="line">    while x != NIL or k != x.key</span><br><span class="line">        if k &lt; x.key</span><br><span class="line">            x = x.left</span><br><span class="line">        else x = x.right</span><br><span class="line">    return x </span><br></pre></td></tr></table></figure><h3 id="minimum-and-maximum"><a class="markdownIt-Anchor" href="#minimum-and-maximum"></a> minimum and maximum</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TREE-MINIMUM(x)</span><br><span class="line">    while x != NIL AND x.left != NIL</span><br><span class="line">        x = x.left</span><br><span class="line">    return x </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TREE-MAXIMUM(x)</span><br><span class="line">    while x != NIL AND x.right != NIL</span><br><span class="line">        x = x.right</span><br><span class="line">    return x </span><br></pre></td></tr></table></figure><h3 id="successor-and-predecessor"><a class="markdownIt-Anchor" href="#successor-and-predecessor"></a> successor and predecessor</h3><p>Successor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TREE-SUCCESSOR(x)</span><br><span class="line">    // if this node has a right subtree, just return the minimum in the right subtree</span><br><span class="line">    if x!= NIL AND x.right != NIL</span><br><span class="line">        return TREE_MINIMUM(x)</span><br><span class="line">    // if this node doesn&#x27;t have a right subtree, go up and find the first parent that&#x27;s the left child of its parent </span><br><span class="line">    y = x.parent</span><br><span class="line">    while y != NIL AND y.right = x</span><br><span class="line">        x = y</span><br><span class="line">        y = y.plarent</span><br><span class="line">    return y</span><br></pre></td></tr></table></figure><p>predecessor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TREE-PREDECESSOR(x)</span><br><span class="line">    // if this node has a left subtree, just return the maximum in the left subtree</span><br><span class="line">    if x!= NIL AND x.left != NIL</span><br><span class="line">        return TREE_MINIMUM(x)</span><br><span class="line">    // if this node doesn&#x27;t have a left subtree, go up and find the first parent that&#x27;s the right child of its parent </span><br><span class="line">    y = x.parent</span><br><span class="line">    while y != NIL AND y.left = x</span><br><span class="line">        x = y</span><br><span class="line">        y = y.plarent</span><br><span class="line">    return y</span><br></pre></td></tr></table></figure><p>####insertion<br />The key point is to find the NIL location, keep the parent, and then append it to the parent<br />loop invariant: p is always the parent of x</p><ul><li>maintain p is the parent of x</li><li>termination: x is NIL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TREE-INSERT(T, z)</span><br><span class="line">    p = NIL</span><br><span class="line">    x = T.root</span><br><span class="line">    while x != NIL</span><br><span class="line">        p = x.parent</span><br><span class="line">        if z.key &gt; x.key</span><br><span class="line">            x = x.right</span><br><span class="line">        else x = x.left</span><br><span class="line">    if p = NIL </span><br><span class="line">        T.root = z // Tree is empty</span><br><span class="line">    elseif z.key &gt; p.key</span><br><span class="line">        p.right = z</span><br><span class="line">    else p.left = z</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;binary-search-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#binary-search-tree&quot;&gt;&lt;/a&gt; Binary Search Tree&lt;/h2&gt;
&lt;h3 id=&quot;keys&quot;&gt;&lt;a class=&quot;mar</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Sum</title>
    <link href="https://deyikong.github.io/2022/03/06/Sum/"/>
    <id>https://deyikong.github.io/2022/03/06/Sum/</id>
    <published>2022-03-06T07:40:41.000Z</published>
    <updated>2023-02-14T07:37:15.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="two-sum"><a class="markdownIt-Anchor" href="#two-sum"></a> Two Sum</h2><p>Keys:</p><ul><li><code>HashMap</code></li><li>O(n)</li></ul><p><em><a href="https://leetcode.com/problems/two-sum/">https://leetcode.com/problems/two-sum/</a></em></p><h2 id="two-sum-ii-not-allow-duplicates-sorted"><a class="markdownIt-Anchor" href="#two-sum-ii-not-allow-duplicates-sorted"></a> Two Sum II (not allow duplicates) (sorted)</h2><p>Keys:</p><ul><li>two pointer</li><li>O(nlog(n))</li></ul><p><em><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/</a></em></p><h2 id="three-sum-not-allow-duplicates-sorted-or-not"><a class="markdownIt-Anchor" href="#three-sum-not-allow-duplicates-sorted-or-not"></a> Three Sum (not allow duplicates) (sorted or not)</h2><p>Keys:</p><ul><li>two pointer<ul><li>outer loop to traverse first occurence</li></ul></li><li>hashset</li><li>no-sort</li><li>O(n^2)</li></ul><p><em><a href="https://leetcode.com/problems/3sum/">https://leetcode.com/problems/3sum/</a></em></p><h2 id="three-sum-smaller"><a class="markdownIt-Anchor" href="#three-sum-smaller"></a> Three Sum Smaller</h2><p><em><a href="https://leetcode.com/problems/3sum-smaller/">https://leetcode.com/problems/3sum-smaller/</a></em> (To be reviewed)</p><h2 id="three-sum-closest"><a class="markdownIt-Anchor" href="#three-sum-closest"></a> Three Sum Closest</h2><p><em><a href="https://leetcode.com/problems/3sum-closest/">https://leetcode.com/problems/3sum-closest/</a></em> (To be reviewed)</p><h2 id="four-sum"><a class="markdownIt-Anchor" href="#four-sum"></a> Four Sum</h2><p><em><a href="https://leetcode.com/problems/4sum/">https://leetcode.com/problems/4sum/</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;two-sum&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#two-sum&quot;&gt;&lt;/a&gt; Two Sum&lt;/h2&gt;
&lt;p&gt;Keys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;O(n)&lt;/li</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="algorithms" scheme="https://deyikong.github.io/tags/algorithms/"/>
    
    <category term="sum" scheme="https://deyikong.github.io/tags/sum/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search</title>
    <link href="https://deyikong.github.io/2022/03/06/Binary-Search/"/>
    <id>https://deyikong.github.io/2022/03/06/Binary-Search/</id>
    <published>2022-03-06T04:19:39.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="concepts"><a class="markdownIt-Anchor" href="#concepts"></a> Concepts</h2><h2 id="key"><a class="markdownIt-Anchor" href="#key"></a> Key</h2><ul><li>get rid of a side that’s not what we are looking for</li><li>whether you can git rid of the border depending on if the border might be the final answer</li><li>use the smallest sample size(size = 1) to test if the condition allows entering the while loop, and test if the condition allows exiting the loop</li></ul><h2 id="questions"><a class="markdownIt-Anchor" href="#questions"></a> Questions</h2><ul><li>closet to a target number(stop at two elements)</li><li>kth closet to a target number<ul><li>find the closest, then traverse left or right</li></ul></li><li>find the first occurrence of a number<ul><li>1,2,2,2 find 2;</li><li>stop at two elements</li><li>don’t stop at the target, keep moving the left: <code>l = m</code>, not <code>m - 1</code> because can’t get rid of m</li></ul></li><li>sorted array of unknown size<ul><li>double the range to find the end index first</li><li>then try to find it in the found range</li></ul></li><li>maximum profit in job scheduling(hard): <a href="https://leetcode.com/problems/maximum-profit-in-job-scheduling/">https://leetcode.com/problems/maximum-profit-in-job-scheduling/</a><ul><li>dp + binary search. top down + bottom up.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;concepts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#concepts&quot;&gt;&lt;/a&gt; Concepts&lt;/h2&gt;
&lt;h2 id=&quot;key&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#key&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="algorithm" scheme="https://deyikong.github.io/tags/algorithm/"/>
    
    <category term="interview" scheme="https://deyikong.github.io/tags/interview/"/>
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="binary search" scheme="https://deyikong.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>Fundamental</title>
    <link href="https://deyikong.github.io/2022/03/06/Fundamental/"/>
    <id>https://deyikong.github.io/2022/03/06/Fundamental/</id>
    <published>2022-03-06T01:51:47.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list-cases"><a class="markdownIt-Anchor" href="#list-cases"></a> list cases</h3><p>when it’s a complicated problem, list all the cases you can think of before coding with an example</p><h3 id="loop-invariants"><a class="markdownIt-Anchor" href="#loop-invariants"></a> Loop Invariants</h3><ul><li><em>Initialization</em>: It’s true prior to the first iteration of the loop(variable initializations before the loop)</li><li><em>Maintenance</em>: If it’s true before an iteration of the loop, it remains true before the next iteration(logic inside the loop)</li><li><em>Termination</em>: When the loop terminates, the invariant gives us a useful property that helps show that the algorithm is correct(condition to stop the loop)</li></ul><p>Initialization -&gt; base case, Maintenance -&gt; inductive step, Termination -&gt; Condition; Termination usually involves loop invariants. In math, inductive steps carries on infinitely, but in here, we stop the loop when the termination happens.</p><p><strong>Notes:</strong> practice always come up with the loop invariants before you start writing the loop.</p><h3 id="running-time"><a class="markdownIt-Anchor" href="#running-time"></a> Running time</h3><p>Big O notation</p><h3 id="worst-cast-and-average-case-analysis"><a class="markdownIt-Anchor" href="#worst-cast-and-average-case-analysis"></a> Worst-cast and average-case analysis</h3><p>Worst-Case</p><ul><li>an upper bound on teh running time</li><li>for some algorithms, the worst case occurs fairly often. Like searching a database for a piece of missing data.</li></ul><h3 id="designing-algorithms"><a class="markdownIt-Anchor" href="#designing-algorithms"></a> Designing Algorithms</h3><p>Principles:</p><ul><li>Incremental: e.g.: insertion sort, insert single element into its proper place.</li><li>Divide and conquer:<ul><li><em>recurisve</em> is from this principle</li><li>three steps:<ul><li><strong>Divide</strong> into smaller subproblems</li><li><strong>Conquer</strong> the subproblems by solving them recursively</li><li><strong>Combine</strong> the solution</li></ul></li><li>analysis<ul><li><strong>recurrence equation</strong> : running time of a recursion call.</li></ul></li><li>binary search</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;list-cases&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list-cases&quot;&gt;&lt;/a&gt; list cases&lt;/h3&gt;
&lt;p&gt;when it’s a complicated problem, list all the ca</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="algorithms" scheme="https://deyikong.github.io/tags/algorithms/"/>
    
    <category term="fundamentals" scheme="https://deyikong.github.io/tags/fundamentals/"/>
    
  </entry>
  
  <entry>
    <title>Sorting</title>
    <link href="https://deyikong.github.io/2022/03/06/Sorting/"/>
    <id>https://deyikong.github.io/2022/03/06/Sorting/</id>
    <published>2022-03-06T00:53:41.000Z</published>
    <updated>2023-02-14T07:37:15.109Z</updated>
    
    <content type="html"><![CDATA[<ul><li></li></ul><h1 id="insertion-sort"><a class="markdownIt-Anchor" href="#insertion-sort"></a> Insertion Sort</h1><h2 id="keys"><a class="markdownIt-Anchor" href="#keys"></a> Keys</h2><ul><li>playing card</li><li>sorted part + unsorted part</li><li>insert in sorted array</li></ul><h2 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h2><h3 id="array"><a class="markdownIt-Anchor" href="#array"></a> array</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GFG</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Function to sort an array using insertion sort</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, key, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">key = arr[i];</span><br><span class="line">j = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Move elements of arr[0..i-1],</span></span><br><span class="line"><span class="comment">// that are greater than key to</span></span><br><span class="line"><span class="comment">// one position ahead of their</span></span><br><span class="line"><span class="comment">// current position</span></span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key)</span><br><span class="line">&#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function to print an array of size N</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the array</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function Call</span></span><br><span class="line">insertionSort(arr, N);</span><br><span class="line">printArray(arr, N);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="singly-linkedlist"><a class="markdownIt-Anchor" href="#singly-linkedlist"></a> Singly linkedlist</h3><ul><li>My solution (not optimal, hard to remember)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">insertionSortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//base case:</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">       <span class="comment">// loop invariants: </span></span><br><span class="line">        <span class="comment">// for each i in [0, n], list before head[i] is sorted, after is not sorted. </span></span><br><span class="line">        <span class="comment">// initialization: i = 1, becasue head[0] is already sorted by itself</span></span><br><span class="line">        <span class="comment">// maintenance: as i++, we need to insert head[i] into it&#x27;s right place.</span></span><br><span class="line">        <span class="comment">// temination condition: when it passes all the elements</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">local</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">int</span> <span class="variable">localTraverseCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">localPrev</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">headCopy</span> <span class="operator">=</span> head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(local != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// break current node</span></span><br><span class="line">              localPrev.next = local.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> local.next;</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// if it&#x27;s the smallest </span></span><br><span class="line">          <span class="keyword">if</span> (local.val &lt; headCopy.val) &#123;</span><br><span class="line">              local.next = headCopy; </span><br><span class="line">              headCopy = local;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// loop through the first part to insert the node </span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">insertTraverse</span> <span class="operator">=</span> headCopy;</span><br><span class="line">            <span class="type">int</span> <span class="variable">insertTraverseCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//local invariants: insertTraverse.val is smaller than local.val but insertTraverse.next.val is bigger</span></span><br><span class="line">                <span class="keyword">while</span> (insertTraverseCount &lt; localTraverseCount &amp;&amp; insertTraverse.val &lt; local.val &amp;&amp; insertTraverse.next.val &lt; local.val) &#123;</span><br><span class="line">                  insertTraverse = insertTraverse.next;  </span><br><span class="line">                    insertTraverseCount++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// termination: it&#x27;s own place, or found a node whose .next.val is bigger</span></span><br><span class="line">                <span class="comment">// insert local after insertTraverse</span></span><br><span class="line">                   <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> insertTraverse.next; </span><br><span class="line">                insertTraverse.next = local;</span><br><span class="line">                local.next = temp;</span><br><span class="line">                <span class="keyword">if</span> (insertTraverseCount == localTraverseCount) &#123;</span><br><span class="line">                   localPrev = local; </span><br><span class="line">                 &#125;</span><br><span class="line">              &#125; </span><br><span class="line">              localTraverseCount++;</span><br><span class="line">            local = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> headCopy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>given solutions:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">insertionSortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// At each iteration, we insert an element into the resulting list.</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find the position to insert the current node</span></span><br><span class="line">        <span class="keyword">while</span> (prev.next != <span class="literal">null</span> &amp;&amp; prev.next.val &lt; curr.val) &#123;</span><br><span class="line">            prev = prev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        <span class="comment">// insert the current node to the new list</span></span><br><span class="line">        curr.next = prev.next;</span><br><span class="line">        prev.next = curr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// moving on to the next iteration</span></span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><a href="https://leetcode.com/problems/insertion-sort-list/">https://leetcode.com/problems/insertion-sort-list/</a></em></p><h1 id="selection-sort"><a class="markdownIt-Anchor" href="#selection-sort"></a> Selection Sort</h1><h2 id="keys-2"><a class="markdownIt-Anchor" href="#keys-2"></a> Keys</h2><ul><li>for for loop</li><li><code>swap(i, minSoFar)</code></li></ul><h2 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h2><ul><li>sort an array with two stacks</li><li>sort an array with one stack</li></ul><h2 id="code-2"><a class="markdownIt-Anchor" href="#code-2"></a> Code</h2><h3 id="selection-sort-2"><a class="markdownIt-Anchor" href="#selection-sort-2"></a> selection sort</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Selection sort in Java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SelectionSort</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> array[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> array.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>; step &lt; size - <span class="number">1</span>; step++) &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">min_idx</span> <span class="operator">=</span> step;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> step + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// To sort in descending order, change &gt; to &lt; in this line.</span></span><br><span class="line">        <span class="comment">// Select the minimum element in each loop.</span></span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt; array[min_idx]) &#123;</span><br><span class="line">          min_idx = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// put min at the correct position</span></span><br><span class="line">      swap(array, min_idx, step);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(array, x, y)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[x];</span><br><span class="line">      array[x] = array[y];</span><br><span class="line">      array[y] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// driver code</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] data = &#123; <span class="number">20</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="type">SelectionSort</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SelectionSort</span>();</span><br><span class="line">    ss.selectionSort(data);</span><br><span class="line">    System.out.println(<span class="string">&quot;Sorted Array in Ascending Order: &quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stacks"><a class="markdownIt-Anchor" href="#stacks"></a> stacks</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java program to sort an</span></span><br><span class="line"><span class="comment">// array using stack</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GFG</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// This function return the sorted stack</span></span><br><span class="line"><span class="keyword">static</span> Stack&lt;Integer&gt; <span class="title function_">sortStack</span><span class="params">(Stack&lt;Integer&gt; input)</span></span><br><span class="line">&#123;</span><br><span class="line">Stack&lt;Integer&gt; tmpStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!input.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// pop out the first element</span></span><br><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> input.peek();</span><br><span class="line">input.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// while temporary stack is not empty and top of stack is smaller than temp</span></span><br><span class="line"><span class="keyword">while</span> (!tmpStack.empty() &amp;&amp; tmpStack.peek() &lt; tmp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// pop from temporary stack and push it to the input stack</span></span><br><span class="line">input.push(tmpStack.peek());</span><br><span class="line">tmpStack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// push tmp in temporary of stack</span></span><br><span class="line">tmpStack.push(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmpStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortArrayUsingStacks</span><span class="params">(<span class="type">int</span> []arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// push array elements</span></span><br><span class="line"><span class="comment">// to stack</span></span><br><span class="line">Stack&lt;Integer&gt; input = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">input.push(arr[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort the temporary stack</span></span><br><span class="line">Stack&lt;Integer&gt; tmpStack = sortStack(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put stack elements in arr[]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = tmpStack.peek();</span><br><span class="line">tmpStack.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver Code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> []arr = &#123;<span class="number">10</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">45</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"></span><br><span class="line">sortArrayUsingStacks(arr, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><a href="https://www.geeksforgeeks.org/sorting-array-using-stacks/">https://www.geeksforgeeks.org/sorting-array-using-stacks/</a></em></p><h1 id="merge-sort"><a class="markdownIt-Anchor" href="#merge-sort"></a> Merge Sort</h1><p><img src="/2022/03/06/Sorting/Merge-Sort-Tutorial.png" alt="Merge Sort" /></p><h2 id="keys-3"><a class="markdownIt-Anchor" href="#keys-3"></a> Keys</h2><ul><li>Divide and conquer</li><li>Divide, Conquer, Combine</li></ul><h2 id="psudo-code"><a class="markdownIt-Anchor" href="#psudo-code"></a> Psudo code</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MergeSort(A, p, r)</span><br><span class="line">if p &lt; r</span><br><span class="line">    q = [p + r] / 2</span><br><span class="line">    MergeSort(A, p, q)</span><br><span class="line">    MergeSort(A, q + 1, r)</span><br><span class="line">    Merge(A, p, q, r)</span><br><span class="line"></span><br><span class="line">Merge(A, p, q, r)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="code-3"><a class="markdownIt-Anchor" href="#code-3"></a> Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Java program for Merge Sort */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MergeSort</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Merges two subarrays of arr[].</span></span><br><span class="line"><span class="comment">// First subarray is arr[l..m]</span></span><br><span class="line"><span class="comment">// Second subarray is arr[m+1..r]</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> m, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Find sizes of two subarrays to be merged</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> m - l + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> r - m;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Create temp arrays */</span></span><br><span class="line"><span class="type">int</span> L[] = <span class="keyword">new</span> <span class="title class_">int</span>[n1];</span><br><span class="line"><span class="type">int</span> R[] = <span class="keyword">new</span> <span class="title class_">int</span>[n2];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Copy data to temp arrays*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; ++i)</span><br><span class="line">L[i] = arr[l + i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n2; ++j)</span><br><span class="line">R[j] = arr[m + <span class="number">1</span> + j];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Merge the temp arrays */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial indexes of first and second subarrays</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initial index of merged subarray array</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> l;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line"><span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class="line">arr[k] = L[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">arr[k] = R[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy remaining elements of L[] if any */</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">arr[k] = L[i];</span><br><span class="line">i++;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy remaining elements of R[] if any */</span></span><br><span class="line"><span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">arr[k] = R[j];</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Main function that sorts arr[l..r] using</span></span><br><span class="line"><span class="comment">// merge()</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line"><span class="comment">// Find the middle point</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span>l+ (r-l)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort first and second halves</span></span><br><span class="line">sort(arr, l, m);</span><br><span class="line">sort(arr, m + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge the sorted halves</span></span><br><span class="line">merge(arr, l, m, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* A utility function to print array of size n */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver code</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Given Array&quot;</span>);</span><br><span class="line">printArray(arr);</span><br><span class="line"></span><br><span class="line"><span class="type">MergeSort</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MergeSort</span>();</span><br><span class="line">ob.sort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;\nSorted array&quot;</span>);</span><br><span class="line">printArray(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><a href="https://www.geeksforgeeks.org/merge-sort/">https://www.geeksforgeeks.org/merge-sort/</a></em></p><p>Merge Two sorted arrays, in place.</p><p>Keys:</p><ul><li>principle: three pointers</li><li>in order not to override, it’s best to move from right to left. so the condition need to check which bigger instead of who’s smaller</li><li>my first thought was moving all the elements of nums1 to the end and go from left. it works too, but there’s more to write.</li><li>how to write the condition is worth memorizing</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> m - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m + n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// positive condition: when will we need to </span></span><br><span class="line">        <span class="comment">// swap with nums1</span></span><br><span class="line">        <span class="comment">// 1. when nums1 still has elements and nums2 is out</span></span><br><span class="line">        <span class="comment">// 2. when nums1 still has elements and nums1[p] &gt; nums2[q]</span></span><br><span class="line">        <span class="comment">// notes: it&#x27;s &quot;&gt;&quot; because we go from right to left. </span></span><br><span class="line">        <span class="keyword">if</span> (p &gt;= <span class="number">0</span> &amp;&amp; (q &lt; <span class="number">0</span> || (nums1[p] &gt; nums2[q]))) &#123;</span><br><span class="line">            nums1[i] = nums1[p--];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums1[i] = nums2[q--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><a href="https://leetcode.com/problems/merge-sorted-array/">https://leetcode.com/problems/merge-sorted-array/</a></em></p><h1 id="heapsort"><a class="markdownIt-Anchor" href="#heapsort"></a> Heapsort</h1><p>Keys:</p><ul><li>heapify the whole array</li><li>keep swapping with the largest element</li></ul><p>Can be used to implement a priority queue<br />Time Complexity: O(nlog(n))</p><h1 id="quick-sort"><a class="markdownIt-Anchor" href="#quick-sort"></a> Quick Sort</h1><h2 id="psudo"><a class="markdownIt-Anchor" href="#psudo"></a> Psudo</h2><details>     <summary>Psudo</summary><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PARTITION(A, p, r) </span><br><span class="line"> x = A[r]</span><br><span class="line"> i = p - 1</span><br><span class="line"> for j = p to r - 1</span><br><span class="line">    if (A[j] &lt;= x)</span><br><span class="line">        i = i + 1</span><br><span class="line">        swap(A[i], A[j])</span><br><span class="line"> swap(A[r], A[i+1])</span><br><span class="line"> return i+1;</span><br><span class="line"></span><br><span class="line">//--------Normal quicksort--------</span><br><span class="line">QUICKSORT(A, p, r)</span><br><span class="line"> if p &lt; r </span><br><span class="line">    q = PARTATION(A, p, r)</span><br><span class="line">    QUICKSORT(A, p, q -1) </span><br><span class="line">    QUICKSORT(A, q + 1, r) </span><br><span class="line"></span><br><span class="line">//--------Tail quicksort--------</span><br><span class="line">TAIL-RECURSIVE-QUICKSORT(A, p, r)</span><br><span class="line"> while(p &lt; r) </span><br><span class="line">    q = PARTITION(A, p, r)</span><br><span class="line">    TAIL-RECURSIVE-QUICKSORT(A, p, q - 1)</span><br><span class="line">    p = q + 1</span><br><span class="line"></span><br><span class="line">//--------Tail quicksort with logn most depth:sub-call on the smaller half--------</span><br><span class="line">TAIL-RECURSIVE-QUICKSORT(A, p, r)</span><br><span class="line"> while(p &lt; r) </span><br><span class="line">    q = PARTITION(A, p, r)</span><br><span class="line">    if (p - q &gt; r - p) </span><br><span class="line">      TAIL-RECURSIVE-QUICKSORT(A, p, q - 1)</span><br><span class="line">      p = q + 1</span><br><span class="line">    else</span><br><span class="line">      TAIL-RECURSIVE-QUICKSORT(A, q + 1, r)</span><br><span class="line">      r = q - 1</span><br></pre></td></tr></table></figure></details><h2 id="sorting-related-problems"><a class="markdownIt-Anchor" href="#sorting-related-problems"></a> Sorting related problems</h2><p>Merge Intervals</p><ul><li><a href="https://leetcode.com/problems/merge-intervals/">https://leetcode.com/problems/merge-intervals/</a></li><li>Keys:<ul><li>sort the array based on the first value, then use a stack to linear scan back.</li><li><details> </li></ul>  <summary> My attempt</summary></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="comment">// sort intervals based on the start time</span></span><br><span class="line">        <span class="comment">// quick sort it</span></span><br><span class="line">        quicksort(intervals, <span class="number">0</span>, intervals.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] interval : intervals) &#123;</span><br><span class="line">          System.out.println(interval[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + interval[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;<span class="type">int</span>[]&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval: intervals) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty() || interval[<span class="number">0</span>] &gt; stack.peek()[<span class="number">1</span>]) &#123;</span><br><span class="line">                stack.push(interval);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               stack.peek()[<span class="number">1</span>] = Math.max(interval[<span class="number">1</span>],stack.peek()[<span class="number">1</span>]); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] ret = <span class="keyword">new</span> <span class="title class_">int</span>[stack.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> stack.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            ret[i--] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> ret; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quicksort</span><span class="params">(<span class="type">int</span>[][] intervals, <span class="type">int</span> q, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="keyword">while</span> (q &lt; r)  &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> partition(intervals, q, r);</span><br><span class="line">           <span class="keyword">if</span> (q - p &lt; r - p) &#123;</span><br><span class="line">             quicksort(intervals, q, p - <span class="number">1</span>);</span><br><span class="line">             q = p + <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             quicksort(intervals, p + <span class="number">1</span>, r);</span><br><span class="line">             r = p - <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[][] intervals, <span class="type">int</span> q, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] pi = intervals[r];</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> q - <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> q; j &lt; r; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[j][<span class="number">0</span>] &lt;= pi[<span class="number">0</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                swap(intervals, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(intervals, i + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[][] intervals, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = intervals[i];</span><br><span class="line">        intervals[i] = intervals[j];</span><br><span class="line">        intervals[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   </details>  ]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;insertion-sort&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#insertion-sort&quot;&gt;&lt;/a&gt; Insertion Sort&lt;/h1&gt;
&lt;h2 id=&quot;keys&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="algorithms" scheme="https://deyikong.github.io/categories/algorithms/"/>
    
    
    <category term="technical" scheme="https://deyikong.github.io/tags/technical/"/>
    
    <category term="leetcode" scheme="https://deyikong.github.io/tags/leetcode/"/>
    
    <category term="algorithms" scheme="https://deyikong.github.io/tags/algorithms/"/>
    
    <category term="sorting" scheme="https://deyikong.github.io/tags/sorting/"/>
    
  </entry>
  
  <entry>
    <title>Start My Algorithm Journey</title>
    <link href="https://deyikong.github.io/2022/03/05/start/"/>
    <id>https://deyikong.github.io/2022/03/05/start/</id>
    <published>2022-03-05T23:12:14.000Z</published>
    <updated>2023-02-14T07:37:15.113Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始准备刷题，学习算法。 这个blog用来记录我的历程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天开始准备刷题，学习算法。 这个blog用来记录我的历程。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
